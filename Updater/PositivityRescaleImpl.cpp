#include <PositivityRescaleImpl.h> 
#include <vector>
#define NODE 0.3333333333333333 
//#define NODE 0.5773502691896258 
double findMinNodalValue(const double *fIn, int ndim) { 
  double fmin = 0.0; 
  if (ndim == 1) { 
  double fVal[2]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = 0.7071067811865476*fIn[0]-0.408248290463863*fIn[1]; 
  fVal[1] = 0.408248290463863*fIn[1]+0.7071067811865476*fIn[0]; 
  fmin = *std::min_element(fVal, fVal+2); 
  } 
  else if(ndim == 2) { 
  double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = 0.1666666666666667*fIn[3]-0.2886751345948129*fIn[2]-0.2886751345948129*fIn[1]+0.5*fIn[0]; 
  fVal[1] = (-0.1666666666666667*fIn[3])-0.2886751345948129*fIn[2]+0.2886751345948129*fIn[1]+0.5*fIn[0]; 
  fVal[2] = (-0.1666666666666667*fIn[3])+0.2886751345948129*fIn[2]-0.2886751345948129*fIn[1]+0.5*fIn[0]; 
  fVal[3] = 0.1666666666666667*fIn[3]+0.2886751345948129*fIn[2]+0.2886751345948129*fIn[1]+0.5*fIn[0]; 
  fmin = *std::min_element(fVal, fVal+4); 
  } 
  else if(ndim == 3) { 
  double fVal[8]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = (-0.06804138174397717*fIn[7])+0.1178511301977579*fIn[6]+0.1178511301977579*fIn[5]+0.1178511301977579*fIn[4]-0.2041241452319315*fIn[3]-0.2041241452319315*fIn[2]-0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[1] = 0.06804138174397717*fIn[7]+0.1178511301977579*fIn[6]-0.1178511301977579*fIn[5]-0.1178511301977579*fIn[4]-0.2041241452319315*fIn[3]-0.2041241452319315*fIn[2]+0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[2] = 0.06804138174397717*fIn[7]-0.1178511301977579*fIn[6]+0.1178511301977579*fIn[5]-0.1178511301977579*fIn[4]-0.2041241452319315*fIn[3]+0.2041241452319315*fIn[2]-0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[3] = (-0.06804138174397717*fIn[7])-0.1178511301977579*fIn[6]-0.1178511301977579*fIn[5]+0.1178511301977579*fIn[4]-0.2041241452319315*fIn[3]+0.2041241452319315*fIn[2]+0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[4] = 0.06804138174397717*fIn[7]-0.1178511301977579*fIn[6]-0.1178511301977579*fIn[5]+0.1178511301977579*fIn[4]+0.2041241452319315*fIn[3]-0.2041241452319315*fIn[2]-0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[5] = (-0.06804138174397717*fIn[7])-0.1178511301977579*fIn[6]+0.1178511301977579*fIn[5]-0.1178511301977579*fIn[4]+0.2041241452319315*fIn[3]-0.2041241452319315*fIn[2]+0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[6] = (-0.06804138174397717*fIn[7])+0.1178511301977579*fIn[6]-0.1178511301977579*fIn[5]-0.1178511301977579*fIn[4]+0.2041241452319315*fIn[3]+0.2041241452319315*fIn[2]-0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fVal[7] = 0.06804138174397717*fIn[7]+0.1178511301977579*fIn[6]+0.1178511301977579*fIn[5]+0.1178511301977579*fIn[4]+0.2041241452319315*fIn[3]+0.2041241452319315*fIn[2]+0.2041241452319315*fIn[1]+0.3535533905932738*fIn[0]; 
  fmin = *std::min_element(fVal, fVal+8); 
  } 
  else if(ndim == 4) { 
  double fVal[16]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = 0.02777777777777778*fIn[15]-0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[1] = (-0.02777777777777778*fIn[15])-0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[2] = (-0.02777777777777778*fIn[15])+0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[3] = 0.02777777777777778*fIn[15]+0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[4] = (-0.02777777777777778*fIn[15])+0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[5] = 0.02777777777777778*fIn[15]+0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[6] = 0.02777777777777778*fIn[15]-0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[7] = (-0.02777777777777778*fIn[15])-0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]-0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[8] = (-0.02777777777777778*fIn[15])+0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[9] = 0.02777777777777778*fIn[15]+0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[10] = 0.02777777777777778*fIn[15]-0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[11] = (-0.02777777777777778*fIn[15])-0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]-0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]-0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[12] = 0.02777777777777778*fIn[15]-0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[13] = (-0.02777777777777778*fIn[15])-0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]-0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]-0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]-0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[14] = (-0.02777777777777778*fIn[15])+0.04811252243246881*fIn[14]-0.04811252243246881*fIn[13]-0.04811252243246881*fIn[12]-0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]-0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]-0.08333333333333333*fIn[6]-0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]-0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fVal[15] = 0.02777777777777778*fIn[15]+0.04811252243246881*fIn[14]+0.04811252243246881*fIn[13]+0.04811252243246881*fIn[12]+0.04811252243246881*fIn[11]+0.08333333333333333*fIn[10]+0.08333333333333333*fIn[9]+0.08333333333333333*fIn[8]+0.08333333333333333*fIn[7]+0.08333333333333333*fIn[6]+0.08333333333333333*fIn[5]+0.1443375672974064*fIn[4]+0.1443375672974064*fIn[3]+0.1443375672974064*fIn[2]+0.1443375672974064*fIn[1]+0.25*fIn[0]; 
  fmin = *std::min_element(fVal, fVal+16); 
  } 
  else if(ndim == 5) { 
  double fVal[32]; // fVal = array of vales of fIn evaluated at each node 
  fVal[0] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[1] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[2] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[3] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[4] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[5] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[6] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[7] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[8] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[9] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[10] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[11] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[12] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[13] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[14] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[15] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]-0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[16] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[17] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[18] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[19] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[20] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[21] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[22] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[23] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]-0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]-0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[24] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[25] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[26] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[27] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]-0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]-0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]-0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]-0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[28] = 0.01134023029066286*fIn[31]-0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[29] = (-0.01134023029066286*fIn[31])-0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]-0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]-0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]-0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]-0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]-0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]-0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]-0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[30] = (-0.01134023029066286*fIn[31])+0.01964185503295966*fIn[30]-0.01964185503295966*fIn[29]-0.01964185503295966*fIn[28]-0.01964185503295966*fIn[27]-0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]-0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]-0.03402069087198858*fIn[21]-0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]-0.03402069087198858*fIn[18]-0.03402069087198858*fIn[17]-0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]-0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]-0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]-0.05892556509887897*fIn[7]-0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]-0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fVal[31] = 0.01134023029066286*fIn[31]+0.01964185503295966*fIn[30]+0.01964185503295966*fIn[29]+0.01964185503295966*fIn[28]+0.01964185503295966*fIn[27]+0.01964185503295966*fIn[26]+0.03402069087198858*fIn[25]+0.03402069087198858*fIn[24]+0.03402069087198858*fIn[23]+0.03402069087198858*fIn[22]+0.03402069087198858*fIn[21]+0.03402069087198858*fIn[20]+0.03402069087198858*fIn[19]+0.03402069087198858*fIn[18]+0.03402069087198858*fIn[17]+0.03402069087198858*fIn[16]+0.05892556509887897*fIn[15]+0.05892556509887897*fIn[14]+0.05892556509887897*fIn[13]+0.05892556509887897*fIn[12]+0.05892556509887897*fIn[11]+0.05892556509887897*fIn[10]+0.05892556509887897*fIn[9]+0.05892556509887897*fIn[8]+0.05892556509887897*fIn[7]+0.05892556509887897*fIn[6]+0.1020620726159657*fIn[5]+0.1020620726159657*fIn[4]+0.1020620726159657*fIn[3]+0.1020620726159657*fIn[2]+0.1020620726159657*fIn[1]+0.1767766952966369*fIn[0]; 
  fmin = *std::min_element(fVal, fVal+32); 
  } 
  return fmin; 
}
double findMinNodalRatio(const double *fNum, const double *fDenom, const double fac, int ndim) { 
  double fmin = 0.0; 
  if (ndim == 1) { 
  double fVal[2]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = 0.7071067811865476*fNum[0]-0.408248290463863*fNum[1]; 
  denom = 0.7071067811865476*fDenom[0]-0.408248290463863*fDenom[1]; 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (num < EPSILON) fVal[0] = 0.; 
  else fVal[0] = fac*num/denom; 
  num = 0.408248290463863*fNum[1]+0.7071067811865476*fNum[0]; 
  denom = 0.408248290463863*fDenom[1]+0.7071067811865476*fDenom[0]; 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (num < EPSILON) fVal[1] = 0.; 
  else fVal[1] = fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+2); 
  } 
  else if(ndim == 2) { 
  double fVal[4]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = 0.1666666666666667*fNum[3]-0.2886751345948129*fNum[2]-0.2886751345948129*fNum[1]+0.5*fNum[0]; 
  denom = 0.1666666666666667*fDenom[3]-0.2886751345948129*fDenom[2]-0.2886751345948129*fDenom[1]+0.5*fDenom[0]; 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (num < EPSILON) fVal[0] = 0.; 
  else fVal[0] = fac*num/denom; 
  num = (-0.1666666666666667*fNum[3])-0.2886751345948129*fNum[2]+0.2886751345948129*fNum[1]+0.5*fNum[0]; 
  denom = (-0.1666666666666667*fDenom[3])-0.2886751345948129*fDenom[2]+0.2886751345948129*fDenom[1]+0.5*fDenom[0]; 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (num < EPSILON) fVal[1] = 0.; 
  else fVal[1] = fac*num/denom; 
  num = (-0.1666666666666667*fNum[3])+0.2886751345948129*fNum[2]-0.2886751345948129*fNum[1]+0.5*fNum[0]; 
  denom = (-0.1666666666666667*fDenom[3])+0.2886751345948129*fDenom[2]-0.2886751345948129*fDenom[1]+0.5*fDenom[0]; 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (num < EPSILON) fVal[2] = 0.; 
  else fVal[2] = fac*num/denom; 
  num = 0.1666666666666667*fNum[3]+0.2886751345948129*fNum[2]+0.2886751345948129*fNum[1]+0.5*fNum[0]; 
  denom = 0.1666666666666667*fDenom[3]+0.2886751345948129*fDenom[2]+0.2886751345948129*fDenom[1]+0.5*fDenom[0]; 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (num < EPSILON) fVal[3] = 0.; 
  else fVal[3] = fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+4); 
  } 
  else if(ndim == 3) { 
  double fVal[8]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = (-0.06804138174397717*fNum[7])+0.1178511301977579*fNum[6]+0.1178511301977579*fNum[5]+0.1178511301977579*fNum[4]-0.2041241452319315*fNum[3]-0.2041241452319315*fNum[2]-0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = (-0.06804138174397717*fDenom[7])+0.1178511301977579*fDenom[6]+0.1178511301977579*fDenom[5]+0.1178511301977579*fDenom[4]-0.2041241452319315*fDenom[3]-0.2041241452319315*fDenom[2]-0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (num < EPSILON) fVal[0] = 0.; 
  else fVal[0] = fac*num/denom; 
  num = 0.06804138174397717*fNum[7]+0.1178511301977579*fNum[6]-0.1178511301977579*fNum[5]-0.1178511301977579*fNum[4]-0.2041241452319315*fNum[3]-0.2041241452319315*fNum[2]+0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = 0.06804138174397717*fDenom[7]+0.1178511301977579*fDenom[6]-0.1178511301977579*fDenom[5]-0.1178511301977579*fDenom[4]-0.2041241452319315*fDenom[3]-0.2041241452319315*fDenom[2]+0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (num < EPSILON) fVal[1] = 0.; 
  else fVal[1] = fac*num/denom; 
  num = 0.06804138174397717*fNum[7]-0.1178511301977579*fNum[6]+0.1178511301977579*fNum[5]-0.1178511301977579*fNum[4]-0.2041241452319315*fNum[3]+0.2041241452319315*fNum[2]-0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = 0.06804138174397717*fDenom[7]-0.1178511301977579*fDenom[6]+0.1178511301977579*fDenom[5]-0.1178511301977579*fDenom[4]-0.2041241452319315*fDenom[3]+0.2041241452319315*fDenom[2]-0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (num < EPSILON) fVal[2] = 0.; 
  else fVal[2] = fac*num/denom; 
  num = (-0.06804138174397717*fNum[7])-0.1178511301977579*fNum[6]-0.1178511301977579*fNum[5]+0.1178511301977579*fNum[4]-0.2041241452319315*fNum[3]+0.2041241452319315*fNum[2]+0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = (-0.06804138174397717*fDenom[7])-0.1178511301977579*fDenom[6]-0.1178511301977579*fDenom[5]+0.1178511301977579*fDenom[4]-0.2041241452319315*fDenom[3]+0.2041241452319315*fDenom[2]+0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (num < EPSILON) fVal[3] = 0.; 
  else fVal[3] = fac*num/denom; 
  num = 0.06804138174397717*fNum[7]-0.1178511301977579*fNum[6]-0.1178511301977579*fNum[5]+0.1178511301977579*fNum[4]+0.2041241452319315*fNum[3]-0.2041241452319315*fNum[2]-0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = 0.06804138174397717*fDenom[7]-0.1178511301977579*fDenom[6]-0.1178511301977579*fDenom[5]+0.1178511301977579*fDenom[4]+0.2041241452319315*fDenom[3]-0.2041241452319315*fDenom[2]-0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (num < EPSILON) fVal[4] = 0.; 
  else fVal[4] = fac*num/denom; 
  num = (-0.06804138174397717*fNum[7])-0.1178511301977579*fNum[6]+0.1178511301977579*fNum[5]-0.1178511301977579*fNum[4]+0.2041241452319315*fNum[3]-0.2041241452319315*fNum[2]+0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = (-0.06804138174397717*fDenom[7])-0.1178511301977579*fDenom[6]+0.1178511301977579*fDenom[5]-0.1178511301977579*fDenom[4]+0.2041241452319315*fDenom[3]-0.2041241452319315*fDenom[2]+0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (num < EPSILON) fVal[5] = 0.; 
  else fVal[5] = fac*num/denom; 
  num = (-0.06804138174397717*fNum[7])+0.1178511301977579*fNum[6]-0.1178511301977579*fNum[5]-0.1178511301977579*fNum[4]+0.2041241452319315*fNum[3]+0.2041241452319315*fNum[2]-0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = (-0.06804138174397717*fDenom[7])+0.1178511301977579*fDenom[6]-0.1178511301977579*fDenom[5]-0.1178511301977579*fDenom[4]+0.2041241452319315*fDenom[3]+0.2041241452319315*fDenom[2]-0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (num < EPSILON) fVal[6] = 0.; 
  else fVal[6] = fac*num/denom; 
  num = 0.06804138174397717*fNum[7]+0.1178511301977579*fNum[6]+0.1178511301977579*fNum[5]+0.1178511301977579*fNum[4]+0.2041241452319315*fNum[3]+0.2041241452319315*fNum[2]+0.2041241452319315*fNum[1]+0.3535533905932738*fNum[0]; 
  denom = 0.06804138174397717*fDenom[7]+0.1178511301977579*fDenom[6]+0.1178511301977579*fDenom[5]+0.1178511301977579*fDenom[4]+0.2041241452319315*fDenom[3]+0.2041241452319315*fDenom[2]+0.2041241452319315*fDenom[1]+0.3535533905932738*fDenom[0]; 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (num < EPSILON) fVal[7] = 0.; 
  else fVal[7] = fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+8); 
  } 
  else if(ndim == 4) { 
  double fVal[16]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = 0.02777777777777778*fNum[15]-0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]-0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (num < EPSILON) fVal[0] = 0.; 
  else fVal[0] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])-0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])-0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (num < EPSILON) fVal[1] = 0.; 
  else fVal[1] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])+0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])+0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (num < EPSILON) fVal[2] = 0.; 
  else fVal[2] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]+0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]+0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (num < EPSILON) fVal[3] = 0.; 
  else fVal[3] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])+0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])+0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (num < EPSILON) fVal[4] = 0.; 
  else fVal[4] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]+0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]+0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (num < EPSILON) fVal[5] = 0.; 
  else fVal[5] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]-0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]-0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (num < EPSILON) fVal[6] = 0.; 
  else fVal[6] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])-0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]-0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])-0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]-0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (num < EPSILON) fVal[7] = 0.; 
  else fVal[7] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])+0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])+0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[8] = 1.; 
  else if (num < EPSILON) fVal[8] = 0.; 
  else fVal[8] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]+0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]+0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[9] = 1.; 
  else if (num < EPSILON) fVal[9] = 0.; 
  else fVal[9] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]-0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]-0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[10] = 1.; 
  else if (num < EPSILON) fVal[10] = 0.; 
  else fVal[10] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])-0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]-0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]-0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])-0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]-0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]-0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[11] = 1.; 
  else if (num < EPSILON) fVal[11] = 0.; 
  else fVal[11] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]-0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]-0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[12] = 1.; 
  else if (num < EPSILON) fVal[12] = 0.; 
  else fVal[12] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])-0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]-0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]-0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]-0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])-0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]-0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]-0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]-0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[13] = 1.; 
  else if (num < EPSILON) fVal[13] = 0.; 
  else fVal[13] = fac*num/denom; 
  num = (-0.02777777777777778*fNum[15])+0.04811252243246881*fNum[14]-0.04811252243246881*fNum[13]-0.04811252243246881*fNum[12]-0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]-0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]-0.08333333333333333*fNum[6]-0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]-0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = (-0.02777777777777778*fDenom[15])+0.04811252243246881*fDenom[14]-0.04811252243246881*fDenom[13]-0.04811252243246881*fDenom[12]-0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]-0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]-0.08333333333333333*fDenom[6]-0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]-0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[14] = 1.; 
  else if (num < EPSILON) fVal[14] = 0.; 
  else fVal[14] = fac*num/denom; 
  num = 0.02777777777777778*fNum[15]+0.04811252243246881*fNum[14]+0.04811252243246881*fNum[13]+0.04811252243246881*fNum[12]+0.04811252243246881*fNum[11]+0.08333333333333333*fNum[10]+0.08333333333333333*fNum[9]+0.08333333333333333*fNum[8]+0.08333333333333333*fNum[7]+0.08333333333333333*fNum[6]+0.08333333333333333*fNum[5]+0.1443375672974064*fNum[4]+0.1443375672974064*fNum[3]+0.1443375672974064*fNum[2]+0.1443375672974064*fNum[1]+0.25*fNum[0]; 
  denom = 0.02777777777777778*fDenom[15]+0.04811252243246881*fDenom[14]+0.04811252243246881*fDenom[13]+0.04811252243246881*fDenom[12]+0.04811252243246881*fDenom[11]+0.08333333333333333*fDenom[10]+0.08333333333333333*fDenom[9]+0.08333333333333333*fDenom[8]+0.08333333333333333*fDenom[7]+0.08333333333333333*fDenom[6]+0.08333333333333333*fDenom[5]+0.1443375672974064*fDenom[4]+0.1443375672974064*fDenom[3]+0.1443375672974064*fDenom[2]+0.1443375672974064*fDenom[1]+0.25*fDenom[0]; 
  if (denom >= 0.) fVal[15] = 1.; 
  else if (num < EPSILON) fVal[15] = 0.; 
  else fVal[15] = fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+16); 
  } 
  else if(ndim == 5) { 
  double fVal[32]; // fVal = array of vales of fIn evaluated at each node 
  double num, denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[0] = 1.; 
  else if (num < EPSILON) fVal[0] = 0.; 
  else fVal[0] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[1] = 1.; 
  else if (num < EPSILON) fVal[1] = 0.; 
  else fVal[1] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[2] = 1.; 
  else if (num < EPSILON) fVal[2] = 0.; 
  else fVal[2] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[3] = 1.; 
  else if (num < EPSILON) fVal[3] = 0.; 
  else fVal[3] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[4] = 1.; 
  else if (num < EPSILON) fVal[4] = 0.; 
  else fVal[4] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[5] = 1.; 
  else if (num < EPSILON) fVal[5] = 0.; 
  else fVal[5] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[6] = 1.; 
  else if (num < EPSILON) fVal[6] = 0.; 
  else fVal[6] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[7] = 1.; 
  else if (num < EPSILON) fVal[7] = 0.; 
  else fVal[7] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[8] = 1.; 
  else if (num < EPSILON) fVal[8] = 0.; 
  else fVal[8] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[9] = 1.; 
  else if (num < EPSILON) fVal[9] = 0.; 
  else fVal[9] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[10] = 1.; 
  else if (num < EPSILON) fVal[10] = 0.; 
  else fVal[10] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[11] = 1.; 
  else if (num < EPSILON) fVal[11] = 0.; 
  else fVal[11] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[12] = 1.; 
  else if (num < EPSILON) fVal[12] = 0.; 
  else fVal[12] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[13] = 1.; 
  else if (num < EPSILON) fVal[13] = 0.; 
  else fVal[13] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[14] = 1.; 
  else if (num < EPSILON) fVal[14] = 0.; 
  else fVal[14] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]-0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]-0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[15] = 1.; 
  else if (num < EPSILON) fVal[15] = 0.; 
  else fVal[15] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[16] = 1.; 
  else if (num < EPSILON) fVal[16] = 0.; 
  else fVal[16] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[17] = 1.; 
  else if (num < EPSILON) fVal[17] = 0.; 
  else fVal[17] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[18] = 1.; 
  else if (num < EPSILON) fVal[18] = 0.; 
  else fVal[18] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[19] = 1.; 
  else if (num < EPSILON) fVal[19] = 0.; 
  else fVal[19] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[20] = 1.; 
  else if (num < EPSILON) fVal[20] = 0.; 
  else fVal[20] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[21] = 1.; 
  else if (num < EPSILON) fVal[21] = 0.; 
  else fVal[21] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[22] = 1.; 
  else if (num < EPSILON) fVal[22] = 0.; 
  else fVal[22] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]-0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]-0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]-0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]-0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[23] = 1.; 
  else if (num < EPSILON) fVal[23] = 0.; 
  else fVal[23] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[24] = 1.; 
  else if (num < EPSILON) fVal[24] = 0.; 
  else fVal[24] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[25] = 1.; 
  else if (num < EPSILON) fVal[25] = 0.; 
  else fVal[25] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[26] = 1.; 
  else if (num < EPSILON) fVal[26] = 0.; 
  else fVal[26] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]-0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]-0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]-0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]-0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]-0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]-0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]-0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]-0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[27] = 1.; 
  else if (num < EPSILON) fVal[27] = 0.; 
  else fVal[27] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]-0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]-0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[28] = 1.; 
  else if (num < EPSILON) fVal[28] = 0.; 
  else fVal[28] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])-0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]-0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]-0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]-0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]-0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]-0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]-0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]-0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])-0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]-0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]-0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]-0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]-0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]-0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]-0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]-0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[29] = 1.; 
  else if (num < EPSILON) fVal[29] = 0.; 
  else fVal[29] = fac*num/denom; 
  num = (-0.01134023029066286*fNum[31])+0.01964185503295966*fNum[30]-0.01964185503295966*fNum[29]-0.01964185503295966*fNum[28]-0.01964185503295966*fNum[27]-0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]-0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]-0.03402069087198858*fNum[21]-0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]-0.03402069087198858*fNum[18]-0.03402069087198858*fNum[17]-0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]-0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]-0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]-0.05892556509887897*fNum[7]-0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]-0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = (-0.01134023029066286*fDenom[31])+0.01964185503295966*fDenom[30]-0.01964185503295966*fDenom[29]-0.01964185503295966*fDenom[28]-0.01964185503295966*fDenom[27]-0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]-0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]-0.03402069087198858*fDenom[21]-0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]-0.03402069087198858*fDenom[18]-0.03402069087198858*fDenom[17]-0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]-0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]-0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]-0.05892556509887897*fDenom[7]-0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]-0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[30] = 1.; 
  else if (num < EPSILON) fVal[30] = 0.; 
  else fVal[30] = fac*num/denom; 
  num = 0.01134023029066286*fNum[31]+0.01964185503295966*fNum[30]+0.01964185503295966*fNum[29]+0.01964185503295966*fNum[28]+0.01964185503295966*fNum[27]+0.01964185503295966*fNum[26]+0.03402069087198858*fNum[25]+0.03402069087198858*fNum[24]+0.03402069087198858*fNum[23]+0.03402069087198858*fNum[22]+0.03402069087198858*fNum[21]+0.03402069087198858*fNum[20]+0.03402069087198858*fNum[19]+0.03402069087198858*fNum[18]+0.03402069087198858*fNum[17]+0.03402069087198858*fNum[16]+0.05892556509887897*fNum[15]+0.05892556509887897*fNum[14]+0.05892556509887897*fNum[13]+0.05892556509887897*fNum[12]+0.05892556509887897*fNum[11]+0.05892556509887897*fNum[10]+0.05892556509887897*fNum[9]+0.05892556509887897*fNum[8]+0.05892556509887897*fNum[7]+0.05892556509887897*fNum[6]+0.1020620726159657*fNum[5]+0.1020620726159657*fNum[4]+0.1020620726159657*fNum[3]+0.1020620726159657*fNum[2]+0.1020620726159657*fNum[1]+0.1767766952966369*fNum[0]; 
  denom = 0.01134023029066286*fDenom[31]+0.01964185503295966*fDenom[30]+0.01964185503295966*fDenom[29]+0.01964185503295966*fDenom[28]+0.01964185503295966*fDenom[27]+0.01964185503295966*fDenom[26]+0.03402069087198858*fDenom[25]+0.03402069087198858*fDenom[24]+0.03402069087198858*fDenom[23]+0.03402069087198858*fDenom[22]+0.03402069087198858*fDenom[21]+0.03402069087198858*fDenom[20]+0.03402069087198858*fDenom[19]+0.03402069087198858*fDenom[18]+0.03402069087198858*fDenom[17]+0.03402069087198858*fDenom[16]+0.05892556509887897*fDenom[15]+0.05892556509887897*fDenom[14]+0.05892556509887897*fDenom[13]+0.05892556509887897*fDenom[12]+0.05892556509887897*fDenom[11]+0.05892556509887897*fDenom[10]+0.05892556509887897*fDenom[9]+0.05892556509887897*fDenom[8]+0.05892556509887897*fDenom[7]+0.05892556509887897*fDenom[6]+0.1020620726159657*fDenom[5]+0.1020620726159657*fDenom[4]+0.1020620726159657*fDenom[3]+0.1020620726159657*fDenom[2]+0.1020620726159657*fDenom[1]+0.1767766952966369*fDenom[0]; 
  if (denom >= 0.) fVal[31] = 1.; 
  else if (num < EPSILON) fVal[31] = 0.; 
  else fVal[31] = fac*num/denom; 
  fmin = *std::min_element(fVal, fVal+32); 
  } 
  return fmin; 
}

// check positivity of cell average and control nodes
bool check(const double *fIn, int ndim, int numBasis, int *idx, double tCurr, int rkIdx)
{
  double f0 = fIn[0]*std::pow(0.7071067811865475,ndim);
  bool status = true;

  if(f0 < 0.) {
     if(ndim == 1) {
       printf("WARNING: negative cell avg %e in cell %2d, tCurr = %e\n", f0, idx[0], tCurr);
     } else if( ndim == 2) {
       printf("WARNING: negative cell avg %e in cell %2d %2d, tCurr = %e, rkIdx = %d\n", f0, idx[0], idx[1], tCurr, rkIdx);
     } else if( ndim == 3) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d, tCurr = %e\n", f0, idx[0], idx[1], idx[2], tCurr);
     } else if( ndim == 4) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d %2d, tCurr = %e\n", f0, idx[0], idx[1], idx[2], idx[3], tCurr);
     } else if( ndim == 5) {
       printf("WARNING: negative cell avg %e in cell %2d %2d %2d %2d %2d, tCurr = %e, rkIdx = %d\n", f0, idx[0], idx[1], idx[2], idx[3], idx[4], tCurr, rkIdx);
     }
     status = false;
  }

  double fmin = findMinNodalValue(fIn, ndim);
  if (fmin < 0.0 && status) {
     if(ndim == 1) {
       printf("warning: negative control node %e in cell %2d, tCurr = %e \n", fmin, idx[0], tCurr);
     } else if(ndim == 2) {
       printf("warning: negative control node %e in cell %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], tCurr);
     } else if(ndim == 3) {
       printf("warning: negative control node %e in cell %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], tCurr);
     } else if(ndim == 4) {
       printf("warning: negative control node %e in cell %2d %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], idx[3], tCurr);
     } else if(ndim == 5) {
       printf("warning: negative control node %e in cell %2d %2d %2d %2d %2d, tCurr = %e\n", fmin, idx[0], idx[1], idx[2], idx[3], idx[4], tCurr);
     }
  }
  return status;
}


double rescale(const double *fIn, double *fOut, int ndim, int numBasis, int *idx, double tCurr)
{
  double f0 = fIn[0]*std::pow(0.7071067811865475,ndim);
  if (f0 < 0.) return 0.;

  double fmin = findMinNodalValue(fIn, ndim);
  double fminOld, del2Change = 0.;
  int j = 0;

  while (j<10 && fmin < 0.0) {
     double theta = std::min(1.0, (1. - EPSILON)/(1. - fmin/f0 + EPSILON));
     //double theta = std::min(1.0, f0/(f0 - fmin + EPSILON));

     // modify moments. note no change to cell average
     fOut[0] = fIn[0]; 
     double del2 = 0.0;
     for(int i=1; i<numBasis; i++) {
       if(theta < 1 && j==0) {
          del2 += fIn[i]*fIn[i];
          fOut[i] = theta*fIn[i];
       } else {
          fOut[i] = theta*fOut[i];
       }
     }
     del2Change += del2*(1-theta)*(1-theta);
     
     fmin = findMinNodalValue(fOut, ndim);
     j++;
  }
  
  return del2Change;
}

double rescaleVolTerm(const double tCurr, const double dt, const double *fIn, const double weight, const double *fRhsSurf, double *fRhsVol, int ndim, int numBasis, int *idx)
{
  double fOutSurf[32];
  for(int i=0; i<numBasis; i++) {
    fOutSurf[i] = weight/dt*fIn[i] + fRhsSurf[i];
  }

  double minOutSurf = findMinNodalValue(fOutSurf, ndim);
  double f0 = fOutSurf[0]*pow(0.7071067811865475, ndim);
 
  if (dt*minOutSurf < -EPSILON*dt*abs(minOutSurf-2*f0)*2) {
    printf("warning: at time %g, surface terms making control node negative, with value = %g, in cell = (%d", tCurr, dt*minOutSurf, idx[0]);
    for(int i=1; i<ndim; i++) {
      printf(", %d", idx[i]);
    }
    printf("), weight = %f \n", weight);
  }

  double scaler = findMinNodalRatio(fOutSurf, fRhsVol, -1.0, ndim);
  if(scaler < 0.) scaler = 0.;
  if(scaler < 1.) scaler *= .95;
  for(int i=0; i<numBasis; i++) {
    fRhsVol[i] *= scaler;
  }

  return scaler;
}
