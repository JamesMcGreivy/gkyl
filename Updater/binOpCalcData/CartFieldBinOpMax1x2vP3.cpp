#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply1x2vMax_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[20]; 
  tmp[0] = 0.3535533905932737*(A[19]*B[19]+A[18]*B[18]+A[17]*B[17]+A[16]*B[16]+A[15]*B[15]+A[14]*B[14]+A[13]*B[13]+A[12]*B[12]+A[11]*B[11]+A[10]*B[10]+A[9]*B[9]+A[8]*B[8]+A[7]*B[7]+A[6]*B[6]+A[5]*B[5]+A[4]*B[4]+A[3]*B[3]+A[2]*B[2]+A[1]*B[1]+A[0]*B[0]); 
  tmp[1] = 0.003367175148507369*(92.22255689363637*(A[7]*B[17]+B[7]*A[17])+105.0*(A[9]*B[15]+B[9]*A[15])+93.91485505499116*(A[5]*B[13]+B[5]*A[13])+105.0*(A[8]*B[12]+B[8]*A[12])+93.91485505499116*(A[4]*B[11]+B[4]*A[11])+105.0*(A[6]*B[10]+B[6]*A[10])+93.91485505499116*(A[1]*B[7]+B[1]*A[7])+105.0*(A[3]*B[5]+B[3]*A[5]+A[2]*B[4]+B[2]*A[4]+A[0]*B[1]+B[0]*A[1])); 
  tmp[2] = 0.003367175148507369*(92.22255689363637*(A[8]*B[18]+B[8]*A[18])+105.0*(A[9]*B[16]+B[9]*A[16])+93.91485505499116*(A[6]*B[14]+B[6]*A[14]+A[4]*B[12]+B[4]*A[12])+105.0*(A[7]*B[11]+B[7]*A[11])+105.0*(A[5]*B[10]+B[5]*A[10])+93.91485505499116*(A[2]*B[8]+B[2]*A[8])+105.0*(A[3]*B[6]+B[3]*A[6]+A[1]*B[4]+B[1]*A[4]+A[0]*B[2]+B[0]*A[2])); 
  tmp[3] = 0.003367175148507369*(92.22255689363637*(A[9]*B[19]+B[9]*A[19])+93.91485505499116*(A[6]*B[16]+B[6]*A[16]+A[5]*B[15]+B[5]*A[15])+105.0*(A[8]*B[14]+B[8]*A[14]+A[7]*B[13]+B[7]*A[13])+105.0*(A[4]*B[10]+B[4]*A[10])+93.91485505499116*(A[3]*B[9]+B[3]*A[9])+105.0*(A[2]*B[6]+B[2]*A[6]+A[1]*B[5]+B[1]*A[5]+A[0]*B[3]+B[0]*A[3])); 
  tmp[4] = 0.003367175148507369*(92.2225568936364*(A[12]*B[18]+B[12]*A[18]+A[11]*B[17]+B[11]*A[17])+105.0*(A[15]*B[16]+B[15]*A[16])+93.91485505499116*(A[10]*B[14]+B[10]*A[14]+A[10]*B[13]+B[10]*A[13])+(84.0*A[11]+93.91485505499116*A[2])*B[12]+(84.0*B[11]+93.91485505499116*B[2])*A[12]+93.91485505499116*(A[1]*B[11]+B[1]*A[11])+105.0*(A[3]*B[10]+B[3]*A[10])+93.91485505499116*(A[4]*B[8]+B[4]*A[8]+A[4]*B[7]+B[4]*A[7])+105.0*(A[5]*B[6]+B[5]*A[6]+A[0]*B[4]+B[0]*A[4]+A[1]*B[2]+B[1]*A[2])); 
  tmp[5] = 0.003367175148507369*(92.2225568936364*(A[15]*B[19]+B[15]*A[19]+A[13]*B[17]+B[13]*A[17])+93.91485505499116*(A[10]*B[16]+B[10]*A[16])+(84.0*A[13]+93.91485505499116*A[3])*B[15]+(84.0*B[13]+93.91485505499116*B[3])*A[15]+105.0*(A[12]*B[14]+B[12]*A[14])+93.91485505499116*(A[1]*B[13]+B[1]*A[13]+A[10]*B[11]+B[10]*A[11])+105.0*(A[2]*B[10]+B[2]*A[10])+93.91485505499116*(A[5]*B[9]+B[5]*A[9]+A[5]*B[7]+B[5]*A[7])+105.0*(A[4]*B[6]+B[4]*A[6]+A[0]*B[5]+B[0]*A[5]+A[1]*B[3]+B[1]*A[3])); 
  tmp[6] = 0.003367175148507369*(92.2225568936364*(A[16]*B[19]+B[16]*A[19]+A[14]*B[18]+B[14]*A[18])+(84.0*A[14]+93.91485505499116*A[3])*B[16]+(84.0*B[14]+93.91485505499116*B[3])*A[16]+93.91485505499116*(A[10]*B[15]+B[10]*A[15]+A[2]*B[14]+B[2]*A[14])+105.0*(A[11]*B[13]+B[11]*A[13])+93.91485505499116*(A[10]*B[12]+B[10]*A[12])+105.0*(A[1]*B[10]+B[1]*A[10])+93.91485505499116*(A[6]*B[9]+B[6]*A[9]+A[6]*B[8]+B[6]*A[8])+105.0*(A[0]*B[6]+B[0]*A[6]+A[4]*B[5]+B[4]*A[5]+A[2]*B[3]+B[2]*A[3])); 
  tmp[7] = 0.003367175148507369*((62.60990336999411*A[17]+92.22255689363637*A[1])*B[17]+92.22255689363637*B[1]*A[17]+93.91485505499116*A[15]*B[15]+(67.0820393249937*A[13]+105.0*A[3])*B[13]+105.0*B[3]*A[13]+93.91485505499116*A[12]*B[12]+(67.0820393249937*A[11]+105.0*A[2])*B[11]+105.0*B[2]*A[11]+93.91485505499116*A[10]*B[10]+(67.0820393249937*A[7]+105.0*A[0])*B[7]+105.0*B[0]*A[7]+93.91485505499116*(A[5]*B[5]+A[4]*B[4]+A[1]*B[1])); 
  tmp[8] = 0.003367175148507369*((62.60990336999411*A[18]+92.22255689363637*A[2])*B[18]+92.22255689363637*B[2]*A[18]+93.91485505499116*A[16]*B[16]+(67.0820393249937*A[14]+105.0*A[3])*B[14]+105.0*B[3]*A[14]+(67.0820393249937*A[12]+105.0*A[1])*B[12]+105.0*B[1]*A[12]+93.91485505499116*(A[11]*B[11]+A[10]*B[10])+(67.0820393249937*A[8]+105.0*A[0])*B[8]+105.0*B[0]*A[8]+93.91485505499116*(A[6]*B[6]+A[4]*B[4]+A[2]*B[2])); 
  tmp[9] = 0.003367175148507369*((62.60990336999411*A[19]+92.22255689363637*A[3])*B[19]+92.22255689363637*B[3]*A[19]+(67.0820393249937*A[16]+105.0*A[2])*B[16]+105.0*B[2]*A[16]+(67.0820393249937*A[15]+105.0*A[1])*B[15]+105.0*B[1]*A[15]+93.91485505499116*(A[14]*B[14]+A[13]*B[13]+A[10]*B[10])+(67.0820393249937*A[9]+105.0*A[0])*B[9]+105.0*B[0]*A[9]+93.91485505499116*(A[6]*B[6]+A[5]*B[5]+A[3]*B[3])); 
  tmp[10] = 0.02357022603955158*(13.41640786499874*(A[5]*B[16]+B[5]*A[16]+A[6]*B[15]+B[6]*A[15]+A[4]*B[14]+B[4]*A[14]+A[4]*B[13]+B[4]*A[13]+A[6]*B[12]+B[6]*A[12]+A[5]*B[11]+B[5]*A[11])+(13.41640786499874*(A[9]+A[8]+A[7])+15.0*A[0])*B[10]+(13.41640786499874*(B[9]+B[8]+B[7])+15.0*B[0])*A[10]+15.0*(A[1]*B[6]+B[1]*A[6]+A[2]*B[5]+B[2]*A[5]+A[3]*B[4]+B[3]*A[4])); 
  tmp[11] = 0.003367175148507369*(92.2225568936364*(A[4]*B[17]+B[4]*A[17])+105.0*(A[6]*B[13]+B[6]*A[13])+84.0*(A[4]*B[12]+B[4]*A[12])+(93.91485505499116*A[8]+67.0820393249937*A[7]+105.0*A[0])*B[11]+(93.91485505499116*B[8]+67.0820393249937*B[7]+105.0*B[0])*A[11]+93.91485505499116*(A[5]*B[10]+B[5]*A[10])+105.0*(A[2]*B[7]+B[2]*A[7])+93.91485505499116*(A[1]*B[4]+B[1]*A[4])); 
  tmp[12] = 0.003367175148507369*(92.2225568936364*(A[4]*B[18]+B[4]*A[18])+105.0*(A[5]*B[14]+B[5]*A[14])+(67.0820393249937*A[8]+93.91485505499116*A[7]+105.0*A[0])*B[12]+(67.0820393249937*B[8]+93.91485505499116*B[7]+105.0*B[0])*A[12]+84.0*(A[4]*B[11]+B[4]*A[11])+93.91485505499116*(A[6]*B[10]+B[6]*A[10])+105.0*(A[1]*B[8]+B[1]*A[8])+93.91485505499116*(A[2]*B[4]+B[2]*A[4])); 
  tmp[13] = 0.003367175148507369*(92.2225568936364*(A[5]*B[17]+B[5]*A[17])+84.0*(A[5]*B[15]+B[5]*A[15])+(93.91485505499116*A[9]+67.0820393249937*A[7]+105.0*A[0])*B[13]+(93.91485505499116*B[9]+67.0820393249937*B[7]+105.0*B[0])*A[13]+105.0*(A[6]*B[11]+B[6]*A[11])+93.91485505499116*(A[4]*B[10]+B[4]*A[10])+105.0*(A[3]*B[7]+B[3]*A[7])+93.91485505499116*(A[1]*B[5]+B[1]*A[5])); 
  tmp[14] = 0.003367175148507369*(92.2225568936364*(A[6]*B[18]+B[6]*A[18])+84.0*(A[6]*B[16]+B[6]*A[16])+(93.91485505499116*A[9]+67.0820393249937*A[8]+105.0*A[0])*B[14]+(93.91485505499116*B[9]+67.0820393249937*B[8]+105.0*B[0])*A[14]+105.0*(A[5]*B[12]+B[5]*A[12])+93.91485505499116*(A[4]*B[10]+B[4]*A[10])+105.0*(A[3]*B[8]+B[3]*A[8])+93.91485505499116*(A[2]*B[6]+B[2]*A[6])); 
  tmp[15] = 0.003367175148507369*(92.2225568936364*(A[5]*B[19]+B[5]*A[19])+105.0*(A[4]*B[16]+B[4]*A[16])+(67.0820393249937*A[9]+93.91485505499116*A[7]+105.0*A[0])*B[15]+(67.0820393249937*B[9]+93.91485505499116*B[7]+105.0*B[0])*A[15]+84.0*(A[5]*B[13]+B[5]*A[13])+93.91485505499116*(A[6]*B[10]+B[6]*A[10])+105.0*(A[1]*B[9]+B[1]*A[9])+93.91485505499116*(A[3]*B[5]+B[3]*A[5])); 
  tmp[16] = 0.003367175148507369*(92.2225568936364*(A[6]*B[19]+B[6]*A[19])+(67.0820393249937*A[9]+93.91485505499116*A[8]+105.0*A[0])*B[16]+(67.0820393249937*B[9]+93.91485505499116*B[8]+105.0*B[0])*A[16]+105.0*(A[4]*B[15]+B[4]*A[15])+84.0*(A[6]*B[14]+B[6]*A[14])+93.91485505499116*(A[5]*B[10]+B[5]*A[10])+105.0*(A[2]*B[9]+B[2]*A[9])+93.91485505499116*(A[3]*B[6]+B[3]*A[6])); 
  tmp[17] = 0.003367175148507369*((62.60990336999411*A[7]+105.0*A[0])*B[17]+(62.60990336999411*B[7]+105.0*B[0])*A[17]+92.2225568936364*(A[5]*B[13]+B[5]*A[13]+A[4]*B[11]+B[4]*A[11])+92.22255689363637*(A[1]*B[7]+B[1]*A[7])); 
  tmp[18] = 0.003367175148507369*((62.60990336999411*A[8]+105.0*A[0])*B[18]+(62.60990336999411*B[8]+105.0*B[0])*A[18]+92.2225568936364*(A[6]*B[14]+B[6]*A[14]+A[4]*B[12]+B[4]*A[12])+92.22255689363637*(A[2]*B[8]+B[2]*A[8])); 
  tmp[19] = 0.003367175148507369*((62.60990336999411*A[9]+105.0*A[0])*B[19]+(62.60990336999411*B[9]+105.0*B[0])*A[19]+92.2225568936364*(A[6]*B[16]+B[6]*A[16]+A[5]*B[15]+B[5]*A[15])+92.22255689363637*(A[3]*B[9]+B[3]*A[9])); 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<20; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseMultiply1x2vMax_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[20]; 
  tmp[0] = 0.7071067811865475*A[3]*B[17]+0.7071067811865475*A[2]*B[7]+0.7071067811865475*A[1]*B[1]+0.7071067811865475*A[0]*B[0]; 
  tmp[1] = 0.6210590034081188*A[2]*B[17]+0.6210590034081188*A[3]*B[7]+0.6324555320336759*A[1]*B[7]+0.6324555320336759*B[1]*A[2]+0.7071067811865475*A[0]*B[1]+0.7071067811865475*B[0]*A[1]; 
  tmp[2] = 0.7071067811865475*A[2]*B[11]+0.7071067811865475*A[1]*B[4]+0.7071067811865475*A[0]*B[2]; 
  tmp[3] = 0.7071067811865475*A[2]*B[13]+0.7071067811865475*A[1]*B[5]+0.7071067811865475*A[0]*B[3]; 
  tmp[4] = 0.6210590034081188*A[3]*B[11]+0.6324555320336759*A[1]*B[11]+0.6324555320336759*A[2]*B[4]+0.7071067811865476*A[0]*B[4]+0.7071067811865476*A[1]*B[2]; 
  tmp[5] = 0.6210590034081188*A[3]*B[13]+0.6324555320336759*A[1]*B[13]+0.6324555320336759*A[2]*B[5]+0.7071067811865476*A[0]*B[5]+0.7071067811865476*A[1]*B[3]; 
  tmp[6] = 0.7071067811865475*A[1]*B[10]+0.7071067811865475*A[0]*B[6]; 
  tmp[7] = 0.421637021355784*A[3]*B[17]+0.6210590034081187*A[1]*B[17]+0.4517539514526257*A[2]*B[7]+0.7071067811865476*A[0]*B[7]+0.6210590034081187*B[1]*A[3]+0.7071067811865476*B[0]*A[2]+0.6324555320336759*A[1]*B[1]; 
  tmp[8] = 0.7071067811865475*A[1]*B[12]+0.7071067811865475*A[0]*B[8]; 
  tmp[9] = 0.7071067811865475*A[1]*B[15]+0.7071067811865475*A[0]*B[9]; 
  tmp[10] = 0.6324555320336759*A[2]*B[10]+0.7071067811865475*A[0]*B[10]+0.7071067811865475*A[1]*B[6]; 
  tmp[11] = 0.4517539514526257*A[2]*B[11]+0.7071067811865476*A[0]*B[11]+0.6210590034081188*A[3]*B[4]+0.6324555320336759*A[1]*B[4]+0.7071067811865476*A[2]*B[2]; 
  tmp[12] = 0.6324555320336758*A[2]*B[12]+0.7071067811865475*A[0]*B[12]+0.7071067811865475*A[1]*B[8]; 
  tmp[13] = 0.4517539514526257*A[2]*B[13]+0.7071067811865476*A[0]*B[13]+0.6210590034081188*A[3]*B[5]+0.6324555320336759*A[1]*B[5]+0.7071067811865476*A[2]*B[3]; 
  tmp[14] = 0.7071067811865475*A[0]*B[14]; 
  tmp[15] = 0.6324555320336758*A[2]*B[15]+0.7071067811865475*A[0]*B[15]+0.7071067811865475*A[1]*B[9]; 
  tmp[16] = 0.7071067811865475*A[0]*B[16]; 
  tmp[17] = 0.421637021355784*A[2]*B[17]+0.7071067811865476*A[0]*B[17]+0.421637021355784*A[3]*B[7]+0.6210590034081187*A[1]*B[7]+0.7071067811865476*B[0]*A[3]+0.6210590034081187*B[1]*A[2]; 
  tmp[18] = 0.7071067811865475*A[0]*B[18]; 
  tmp[19] = 0.7071067811865475*A[0]*B[19]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<20; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseDivide1x2vMax_P3(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.870828693386971*A[3])+1.58113883008419*A[2]-1.224744871391589*A[1]+0.7071067811865475*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.870828693386971*A[3]+1.58113883008419*A[2]+1.224744871391589*A[1]+0.7071067811865475*A[0] < 0.0) { 
    avgA = true;
  }
 
  double As[4]; 
  double Bs[20]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = 0.0; 
    Bs[5] = 0.0; 
    Bs[6] = B[6]; 
    Bs[7] = 0.0; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = B[14]; 
    Bs[15] = 0.0; 
    Bs[16] = B[16]; 
    Bs[17] = 0.0; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
  } 
 
  // Fill AEM matrix. 
  data->AEM_D = Eigen::MatrixXd::Zero(20,20); 
  data->AEM_D(0,0) = 0.7071067811865475*As[0]; 
  data->AEM_D(0,1) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,4) = 0.7071067811865475*As[1]; 
  data->AEM_D(0,5) = 0.6324555320336759*As[2]+0.7071067811865475*As[0]; 
  data->AEM_D(0,10) = 0.7071067811865475*As[0]; 
  data->AEM_D(0,15) = 0.7071067811865475*As[0]; 
  data->AEM_D(0,18) = 0.7071067811865475*As[1]; 
  data->AEM_D(1,3) = 0.7071067811865475*As[1]; 
  data->AEM_D(1,8) = 0.7071067811865475*As[2]; 
  data->AEM_D(1,9) = 0.6210590034081186*As[3]+0.6324555320336759*As[1]; 
  data->AEM_D(2,6) = 0.7071067811865475*As[2]; 
  data->AEM_D(2,15) = 0.7071067811865475*As[2]; 
  data->AEM_D(3,8) = 0.7071067811865475*As[3]; 
  data->AEM_D(3,9) = 0.6210590034081186*As[2]; 
 
  // Fill BEV. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,20,1) = data->u_D; 
 
} 
 
