#include <math.h> 
#include <CartFieldBinOpModDecl.h> 
 
using namespace Eigen; 
 
void CartFieldBinOpMultiply3x2vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[32]; 
 
  tmp[0] = 0.1767766952966368*(A[31]*B[31]+A[30]*B[30]+A[29]*B[29]+A[28]*B[28]+A[27]*B[27]+A[26]*B[26]+A[25]*B[25]+A[24]*B[24]+A[23]*B[23]+A[22]*B[22]+A[21]*B[21]+A[20]*B[20]+A[19]*B[19]+A[18]*B[18]+A[17]*B[17]+A[16]*B[16]+A[15]*B[15]+A[14]*B[14]+A[13]*B[13]+A[12]*B[12]+A[11]*B[11]+A[10]*B[10]+A[9]*B[9]+A[8]*B[8]+A[7]*B[7]+A[6]*B[6]+A[5]*B[5]+A[4]*B[4]+A[3]*B[3]+A[2]*B[2]+A[1]*B[1]+A[0]*B[0]); 
  tmp[1] = 0.1767766952966368*(A[30]*B[31]+B[30]*A[31]+A[25]*B[29]+B[25]*A[29]+A[24]*B[28]+B[24]*A[28]+A[22]*B[27]+B[22]*A[27]+A[19]*B[26]+B[19]*A[26]+A[15]*B[23]+B[15]*A[23]+A[14]*B[21]+B[14]*A[21]+A[13]*B[20]+B[13]*A[20]+A[11]*B[18]+B[11]*A[18]+A[10]*B[17]+B[10]*A[17]+A[8]*B[16]+B[8]*A[16]+A[5]*B[12]+B[5]*A[12]+A[4]*B[9]+B[4]*A[9]+A[3]*B[7]+B[3]*A[7]+A[2]*B[6]+B[2]*A[6]+A[0]*B[1]+B[0]*A[1]); 
  tmp[2] = 0.1767766952966368*(A[29]*B[31]+B[29]*A[31]+A[25]*B[30]+B[25]*A[30]+A[23]*B[28]+B[23]*A[28]+A[21]*B[27]+B[21]*A[27]+A[18]*B[26]+B[18]*A[26]+A[15]*B[24]+B[15]*A[24]+A[14]*B[22]+B[14]*A[22]+A[12]*B[20]+B[12]*A[20]+A[11]*B[19]+B[11]*A[19]+A[9]*B[17]+B[9]*A[17]+A[7]*B[16]+B[7]*A[16]+A[5]*B[13]+B[5]*A[13]+A[4]*B[10]+B[4]*A[10]+A[3]*B[8]+B[3]*A[8]+A[1]*B[6]+B[1]*A[6]+A[0]*B[2]+B[0]*A[2]); 
  tmp[3] = 0.1767766952966368*(A[28]*B[31]+B[28]*A[31]+A[24]*B[30]+B[24]*A[30]+A[23]*B[29]+B[23]*A[29]+A[20]*B[27]+B[20]*A[27]+A[17]*B[26]+B[17]*A[26]+A[15]*B[25]+B[15]*A[25]+A[13]*B[22]+B[13]*A[22]+A[12]*B[21]+B[12]*A[21]+A[10]*B[19]+B[10]*A[19]+A[9]*B[18]+B[9]*A[18]+A[6]*B[16]+B[6]*A[16]+A[5]*B[14]+B[5]*A[14]+A[4]*B[11]+B[4]*A[11]+A[2]*B[8]+B[2]*A[8]+A[1]*B[7]+B[1]*A[7]+A[0]*B[3]+B[0]*A[3]); 
  tmp[4] = 0.1767766952966368*(A[27]*B[31]+B[27]*A[31]+A[22]*B[30]+B[22]*A[30]+A[21]*B[29]+B[21]*A[29]+A[20]*B[28]+B[20]*A[28]+A[16]*B[26]+B[16]*A[26]+A[14]*B[25]+B[14]*A[25]+A[13]*B[24]+B[13]*A[24]+A[12]*B[23]+B[12]*A[23]+A[8]*B[19]+B[8]*A[19]+A[7]*B[18]+B[7]*A[18]+A[6]*B[17]+B[6]*A[17]+A[5]*B[15]+B[5]*A[15]+A[3]*B[11]+B[3]*A[11]+A[2]*B[10]+B[2]*A[10]+A[1]*B[9]+B[1]*A[9]+A[0]*B[4]+B[0]*A[4]); 
  tmp[5] = 0.1767766952966368*(A[26]*B[31]+B[26]*A[31]+A[19]*B[30]+B[19]*A[30]+A[18]*B[29]+B[18]*A[29]+A[17]*B[28]+B[17]*A[28]+A[16]*B[27]+B[16]*A[27]+A[11]*B[25]+B[11]*A[25]+A[10]*B[24]+B[10]*A[24]+A[9]*B[23]+B[9]*A[23]+A[8]*B[22]+B[8]*A[22]+A[7]*B[21]+B[7]*A[21]+A[6]*B[20]+B[6]*A[20]+A[4]*B[15]+B[4]*A[15]+A[3]*B[14]+B[3]*A[14]+A[2]*B[13]+B[2]*A[13]+A[1]*B[12]+B[1]*A[12]+A[0]*B[5]+B[0]*A[5]); 
  tmp[6] = 0.1767766952966368*(A[25]*B[31]+B[25]*A[31]+A[29]*B[30]+B[29]*A[30]+A[15]*B[28]+B[15]*A[28]+A[14]*B[27]+B[14]*A[27]+A[11]*B[26]+B[11]*A[26]+A[23]*B[24]+B[23]*A[24]+A[21]*B[22]+B[21]*A[22]+A[5]*B[20]+B[5]*A[20]+A[18]*B[19]+B[18]*A[19]+A[4]*B[17]+B[4]*A[17]+A[3]*B[16]+B[3]*A[16]+A[12]*B[13]+B[12]*A[13]+A[9]*B[10]+B[9]*A[10]+A[7]*B[8]+B[7]*A[8]+A[0]*B[6]+B[0]*A[6]+A[1]*B[2]+B[1]*A[2]); 
  tmp[7] = 0.1767766952966368*(A[24]*B[31]+B[24]*A[31]+A[28]*B[30]+B[28]*A[30]+A[15]*B[29]+B[15]*A[29]+A[13]*B[27]+B[13]*A[27]+A[10]*B[26]+B[10]*A[26]+A[23]*B[25]+B[23]*A[25]+A[20]*B[22]+B[20]*A[22]+A[5]*B[21]+B[5]*A[21]+A[17]*B[19]+B[17]*A[19]+A[4]*B[18]+B[4]*A[18]+A[2]*B[16]+B[2]*A[16]+A[12]*B[14]+B[12]*A[14]+A[9]*B[11]+B[9]*A[11]+A[6]*B[8]+B[6]*A[8]+A[0]*B[7]+B[0]*A[7]+A[1]*B[3]+B[1]*A[3]); 
  tmp[8] = 0.1767766952966368*(A[23]*B[31]+B[23]*A[31]+A[15]*B[30]+B[15]*A[30]+A[28]*B[29]+B[28]*A[29]+A[12]*B[27]+B[12]*A[27]+A[9]*B[26]+B[9]*A[26]+A[24]*B[25]+B[24]*A[25]+A[5]*B[22]+B[5]*A[22]+A[20]*B[21]+B[20]*A[21]+A[4]*B[19]+B[4]*A[19]+A[17]*B[18]+B[17]*A[18]+A[1]*B[16]+B[1]*A[16]+A[13]*B[14]+B[13]*A[14]+A[10]*B[11]+B[10]*A[11]+A[0]*B[8]+B[0]*A[8]+A[6]*B[7]+B[6]*A[7]+A[2]*B[3]+B[2]*A[3]); 
  tmp[9] = 0.1767766952966368*(A[22]*B[31]+B[22]*A[31]+A[27]*B[30]+B[27]*A[30]+A[14]*B[29]+B[14]*A[29]+A[13]*B[28]+B[13]*A[28]+A[8]*B[26]+B[8]*A[26]+A[21]*B[25]+B[21]*A[25]+A[20]*B[24]+B[20]*A[24]+A[5]*B[23]+B[5]*A[23]+A[16]*B[19]+B[16]*A[19]+A[3]*B[18]+B[3]*A[18]+A[2]*B[17]+B[2]*A[17]+A[12]*B[15]+B[12]*A[15]+A[7]*B[11]+B[7]*A[11]+A[6]*B[10]+B[6]*A[10]+A[0]*B[9]+B[0]*A[9]+A[1]*B[4]+B[1]*A[4]); 
  tmp[10] = 0.1767766952966368*(A[21]*B[31]+B[21]*A[31]+A[14]*B[30]+B[14]*A[30]+A[27]*B[29]+B[27]*A[29]+A[12]*B[28]+B[12]*A[28]+A[7]*B[26]+B[7]*A[26]+A[22]*B[25]+B[22]*A[25]+A[5]*B[24]+B[5]*A[24]+A[20]*B[23]+B[20]*A[23]+A[3]*B[19]+B[3]*A[19]+A[16]*B[18]+B[16]*A[18]+A[1]*B[17]+B[1]*A[17]+A[13]*B[15]+B[13]*A[15]+A[8]*B[11]+B[8]*A[11]+A[0]*B[10]+B[0]*A[10]+A[6]*B[9]+B[6]*A[9]+A[2]*B[4]+B[2]*A[4]); 
  tmp[11] = 0.1767766952966368*(A[20]*B[31]+B[20]*A[31]+A[13]*B[30]+B[13]*A[30]+A[12]*B[29]+B[12]*A[29]+A[27]*B[28]+B[27]*A[28]+A[6]*B[26]+B[6]*A[26]+A[5]*B[25]+B[5]*A[25]+A[22]*B[24]+B[22]*A[24]+A[21]*B[23]+B[21]*A[23]+A[2]*B[19]+B[2]*A[19]+A[1]*B[18]+B[1]*A[18]+A[16]*B[17]+B[16]*A[17]+A[14]*B[15]+B[14]*A[15]+A[0]*B[11]+B[0]*A[11]+A[8]*B[10]+B[8]*A[10]+A[7]*B[9]+B[7]*A[9]+A[3]*B[4]+B[3]*A[4]); 
  tmp[12] = 0.1767766952966368*(A[19]*B[31]+B[19]*A[31]+A[26]*B[30]+B[26]*A[30]+A[11]*B[29]+B[11]*A[29]+A[10]*B[28]+B[10]*A[28]+A[8]*B[27]+B[8]*A[27]+A[18]*B[25]+B[18]*A[25]+A[17]*B[24]+B[17]*A[24]+A[4]*B[23]+B[4]*A[23]+A[16]*B[22]+B[16]*A[22]+A[3]*B[21]+B[3]*A[21]+A[2]*B[20]+B[2]*A[20]+A[9]*B[15]+B[9]*A[15]+A[7]*B[14]+B[7]*A[14]+A[6]*B[13]+B[6]*A[13]+A[0]*B[12]+B[0]*A[12]+A[1]*B[5]+B[1]*A[5]); 
  tmp[13] = 0.1767766952966368*(A[18]*B[31]+B[18]*A[31]+A[11]*B[30]+B[11]*A[30]+A[26]*B[29]+B[26]*A[29]+A[9]*B[28]+B[9]*A[28]+A[7]*B[27]+B[7]*A[27]+A[19]*B[25]+B[19]*A[25]+A[4]*B[24]+B[4]*A[24]+A[17]*B[23]+B[17]*A[23]+A[3]*B[22]+B[3]*A[22]+A[16]*B[21]+B[16]*A[21]+A[1]*B[20]+B[1]*A[20]+A[10]*B[15]+B[10]*A[15]+A[8]*B[14]+B[8]*A[14]+A[0]*B[13]+B[0]*A[13]+A[6]*B[12]+B[6]*A[12]+A[2]*B[5]+B[2]*A[5]); 
  tmp[14] = 0.1767766952966368*(A[17]*B[31]+B[17]*A[31]+A[10]*B[30]+B[10]*A[30]+A[9]*B[29]+B[9]*A[29]+A[26]*B[28]+B[26]*A[28]+A[6]*B[27]+B[6]*A[27]+A[4]*B[25]+B[4]*A[25]+A[19]*B[24]+B[19]*A[24]+A[18]*B[23]+B[18]*A[23]+A[2]*B[22]+B[2]*A[22]+A[1]*B[21]+B[1]*A[21]+A[16]*B[20]+B[16]*A[20]+A[11]*B[15]+B[11]*A[15]+A[0]*B[14]+B[0]*A[14]+A[8]*B[13]+B[8]*A[13]+A[7]*B[12]+B[7]*A[12]+A[3]*B[5]+B[3]*A[5]); 
  tmp[15] = 0.1767766952966368*(A[16]*B[31]+B[16]*A[31]+A[8]*B[30]+B[8]*A[30]+A[7]*B[29]+B[7]*A[29]+A[6]*B[28]+B[6]*A[28]+A[26]*B[27]+B[26]*A[27]+A[3]*B[25]+B[3]*A[25]+A[2]*B[24]+B[2]*A[24]+A[1]*B[23]+B[1]*A[23]+A[19]*B[22]+B[19]*A[22]+A[18]*B[21]+B[18]*A[21]+A[17]*B[20]+B[17]*A[20]+A[0]*B[15]+B[0]*A[15]+A[11]*B[14]+B[11]*A[14]+A[10]*B[13]+B[10]*A[13]+A[9]*B[12]+B[9]*A[12]+A[4]*B[5]+B[4]*A[5]); 
  tmp[16] = 0.1767766952966368*(A[15]*B[31]+B[15]*A[31]+A[23]*B[30]+B[23]*A[30]+A[24]*B[29]+B[24]*A[29]+A[25]*B[28]+B[25]*A[28]+A[5]*B[27]+B[5]*A[27]+A[4]*B[26]+B[4]*A[26]+A[12]*B[22]+B[12]*A[22]+A[13]*B[21]+B[13]*A[21]+A[14]*B[20]+B[14]*A[20]+A[9]*B[19]+B[9]*A[19]+A[10]*B[18]+B[10]*A[18]+A[11]*B[17]+B[11]*A[17]+A[0]*B[16]+B[0]*A[16]+A[1]*B[8]+B[1]*A[8]+A[2]*B[7]+B[2]*A[7]+A[3]*B[6]+B[3]*A[6]); 
  tmp[17] = 0.1767766952966368*(A[14]*B[31]+B[14]*A[31]+A[21]*B[30]+B[21]*A[30]+A[22]*B[29]+B[22]*A[29]+A[5]*B[28]+B[5]*A[28]+A[25]*B[27]+B[25]*A[27]+A[3]*B[26]+B[3]*A[26]+A[12]*B[24]+B[12]*A[24]+A[13]*B[23]+B[13]*A[23]+A[15]*B[20]+B[15]*A[20]+A[7]*B[19]+B[7]*A[19]+A[8]*B[18]+B[8]*A[18]+A[0]*B[17]+B[0]*A[17]+A[11]*B[16]+B[11]*A[16]+A[1]*B[10]+B[1]*A[10]+A[2]*B[9]+B[2]*A[9]+A[4]*B[6]+B[4]*A[6]); 
  tmp[18] = 0.1767766952966368*(A[13]*B[31]+B[13]*A[31]+A[20]*B[30]+B[20]*A[30]+A[5]*B[29]+B[5]*A[29]+A[22]*B[28]+B[22]*A[28]+A[24]*B[27]+B[24]*A[27]+A[2]*B[26]+B[2]*A[26]+A[12]*B[25]+B[12]*A[25]+A[14]*B[23]+B[14]*A[23]+A[15]*B[21]+B[15]*A[21]+A[6]*B[19]+B[6]*A[19]+A[0]*B[18]+B[0]*A[18]+A[8]*B[17]+B[8]*A[17]+A[10]*B[16]+B[10]*A[16]+A[1]*B[11]+B[1]*A[11]+A[3]*B[9]+B[3]*A[9]+A[4]*B[7]+B[4]*A[7]); 
  tmp[19] = 0.1767766952966368*(A[12]*B[31]+B[12]*A[31]+A[5]*B[30]+B[5]*A[30]+A[20]*B[29]+B[20]*A[29]+A[21]*B[28]+B[21]*A[28]+A[23]*B[27]+B[23]*A[27]+A[1]*B[26]+B[1]*A[26]+A[13]*B[25]+B[13]*A[25]+A[14]*B[24]+B[14]*A[24]+A[15]*B[22]+B[15]*A[22]+A[0]*B[19]+B[0]*A[19]+A[6]*B[18]+B[6]*A[18]+A[7]*B[17]+B[7]*A[17]+A[9]*B[16]+B[9]*A[16]+A[2]*B[11]+B[2]*A[11]+A[3]*B[10]+B[3]*A[10]+A[4]*B[8]+B[4]*A[8]); 
  tmp[20] = 0.1767766952966368*(A[11]*B[31]+B[11]*A[31]+A[18]*B[30]+B[18]*A[30]+A[19]*B[29]+B[19]*A[29]+A[4]*B[28]+B[4]*A[28]+A[3]*B[27]+B[3]*A[27]+A[25]*B[26]+B[25]*A[26]+A[9]*B[24]+B[9]*A[24]+A[10]*B[23]+B[10]*A[23]+A[7]*B[22]+B[7]*A[22]+A[8]*B[21]+B[8]*A[21]+A[0]*B[20]+B[0]*A[20]+A[15]*B[17]+B[15]*A[17]+A[14]*B[16]+B[14]*A[16]+A[1]*B[13]+B[1]*A[13]+A[2]*B[12]+B[2]*A[12]+A[5]*B[6]+B[5]*A[6]); 
  tmp[21] = 0.1767766952966368*(A[10]*B[31]+B[10]*A[31]+A[17]*B[30]+B[17]*A[30]+A[4]*B[29]+B[4]*A[29]+A[19]*B[28]+B[19]*A[28]+A[2]*B[27]+B[2]*A[27]+A[24]*B[26]+B[24]*A[26]+A[9]*B[25]+B[9]*A[25]+A[11]*B[23]+B[11]*A[23]+A[6]*B[22]+B[6]*A[22]+A[0]*B[21]+B[0]*A[21]+A[8]*B[20]+B[8]*A[20]+A[15]*B[18]+B[15]*A[18]+A[13]*B[16]+B[13]*A[16]+A[1]*B[14]+B[1]*A[14]+A[3]*B[12]+B[3]*A[12]+A[5]*B[7]+B[5]*A[7]); 
  tmp[22] = 0.1767766952966368*(A[9]*B[31]+B[9]*A[31]+A[4]*B[30]+B[4]*A[30]+A[17]*B[29]+B[17]*A[29]+A[18]*B[28]+B[18]*A[28]+A[1]*B[27]+B[1]*A[27]+A[23]*B[26]+B[23]*A[26]+A[10]*B[25]+B[10]*A[25]+A[11]*B[24]+B[11]*A[24]+A[0]*B[22]+B[0]*A[22]+A[6]*B[21]+B[6]*A[21]+A[7]*B[20]+B[7]*A[20]+A[15]*B[19]+B[15]*A[19]+A[12]*B[16]+B[12]*A[16]+A[2]*B[14]+B[2]*A[14]+A[3]*B[13]+B[3]*A[13]+A[5]*B[8]+B[5]*A[8]); 
  tmp[23] = 0.1767766952966368*(A[8]*B[31]+B[8]*A[31]+A[16]*B[30]+B[16]*A[30]+A[3]*B[29]+B[3]*A[29]+A[2]*B[28]+B[2]*A[28]+A[19]*B[27]+B[19]*A[27]+A[22]*B[26]+B[22]*A[26]+A[7]*B[25]+B[7]*A[25]+A[6]*B[24]+B[6]*A[24]+A[0]*B[23]+B[0]*A[23]+A[11]*B[21]+B[11]*A[21]+A[10]*B[20]+B[10]*A[20]+A[14]*B[18]+B[14]*A[18]+A[13]*B[17]+B[13]*A[17]+A[1]*B[15]+B[1]*A[15]+A[4]*B[12]+B[4]*A[12]+A[5]*B[9]+B[5]*A[9]); 
  tmp[24] = 0.1767766952966368*(A[7]*B[31]+B[7]*A[31]+A[3]*B[30]+B[3]*A[30]+A[16]*B[29]+B[16]*A[29]+A[1]*B[28]+B[1]*A[28]+A[18]*B[27]+B[18]*A[27]+A[21]*B[26]+B[21]*A[26]+A[8]*B[25]+B[8]*A[25]+A[0]*B[24]+B[0]*A[24]+A[6]*B[23]+B[6]*A[23]+A[11]*B[22]+B[11]*A[22]+A[9]*B[20]+B[9]*A[20]+A[14]*B[19]+B[14]*A[19]+A[12]*B[17]+B[12]*A[17]+A[2]*B[15]+B[2]*A[15]+A[4]*B[13]+B[4]*A[13]+A[5]*B[10]+B[5]*A[10]); 
  tmp[25] = 0.1767766952966368*(A[6]*B[31]+B[6]*A[31]+A[2]*B[30]+B[2]*A[30]+A[1]*B[29]+B[1]*A[29]+A[16]*B[28]+B[16]*A[28]+A[17]*B[27]+B[17]*A[27]+A[20]*B[26]+B[20]*A[26]+A[0]*B[25]+B[0]*A[25]+A[8]*B[24]+B[8]*A[24]+A[7]*B[23]+B[7]*A[23]+A[10]*B[22]+B[10]*A[22]+A[9]*B[21]+B[9]*A[21]+A[13]*B[19]+B[13]*A[19]+A[12]*B[18]+B[12]*A[18]+A[3]*B[15]+B[3]*A[15]+A[4]*B[14]+B[4]*A[14]+A[5]*B[11]+B[5]*A[11]); 
  tmp[26] = 0.1767766952966368*(A[5]*B[31]+B[5]*A[31]+A[12]*B[30]+B[12]*A[30]+A[13]*B[29]+B[13]*A[29]+A[14]*B[28]+B[14]*A[28]+A[15]*B[27]+B[15]*A[27]+A[0]*B[26]+B[0]*A[26]+A[20]*B[25]+B[20]*A[25]+A[21]*B[24]+B[21]*A[24]+A[22]*B[23]+B[22]*A[23]+A[1]*B[19]+B[1]*A[19]+A[2]*B[18]+B[2]*A[18]+A[3]*B[17]+B[3]*A[17]+A[4]*B[16]+B[4]*A[16]+A[6]*B[11]+B[6]*A[11]+A[7]*B[10]+B[7]*A[10]+A[8]*B[9]+B[8]*A[9]); 
  tmp[27] = 0.1767766952966368*(A[4]*B[31]+B[4]*A[31]+A[9]*B[30]+B[9]*A[30]+A[10]*B[29]+B[10]*A[29]+A[11]*B[28]+B[11]*A[28]+A[0]*B[27]+B[0]*A[27]+A[15]*B[26]+B[15]*A[26]+A[17]*B[25]+B[17]*A[25]+A[18]*B[24]+B[18]*A[24]+A[19]*B[23]+B[19]*A[23]+A[1]*B[22]+B[1]*A[22]+A[2]*B[21]+B[2]*A[21]+A[3]*B[20]+B[3]*A[20]+A[5]*B[16]+B[5]*A[16]+A[6]*B[14]+B[6]*A[14]+A[7]*B[13]+B[7]*A[13]+A[8]*B[12]+B[8]*A[12]); 
  tmp[28] = 0.1767766952966368*(A[3]*B[31]+B[3]*A[31]+A[7]*B[30]+B[7]*A[30]+A[8]*B[29]+B[8]*A[29]+A[0]*B[28]+B[0]*A[28]+A[11]*B[27]+B[11]*A[27]+A[14]*B[26]+B[14]*A[26]+A[16]*B[25]+B[16]*A[25]+A[1]*B[24]+B[1]*A[24]+A[2]*B[23]+B[2]*A[23]+A[18]*B[22]+B[18]*A[22]+A[19]*B[21]+B[19]*A[21]+A[4]*B[20]+B[4]*A[20]+A[5]*B[17]+B[5]*A[17]+A[6]*B[15]+B[6]*A[15]+A[9]*B[13]+B[9]*A[13]+A[10]*B[12]+B[10]*A[12]); 
  tmp[29] = 0.1767766952966368*(A[2]*B[31]+B[2]*A[31]+A[6]*B[30]+B[6]*A[30]+A[0]*B[29]+B[0]*A[29]+A[8]*B[28]+B[8]*A[28]+A[10]*B[27]+B[10]*A[27]+A[13]*B[26]+B[13]*A[26]+A[1]*B[25]+B[1]*A[25]+A[16]*B[24]+B[16]*A[24]+A[3]*B[23]+B[3]*A[23]+A[17]*B[22]+B[17]*A[22]+A[4]*B[21]+B[4]*A[21]+A[19]*B[20]+B[19]*A[20]+A[5]*B[18]+B[5]*A[18]+A[7]*B[15]+B[7]*A[15]+A[9]*B[14]+B[9]*A[14]+A[11]*B[12]+B[11]*A[12]); 
  tmp[30] = 0.1767766952966368*(A[1]*B[31]+B[1]*A[31]+A[0]*B[30]+B[0]*A[30]+A[6]*B[29]+B[6]*A[29]+A[7]*B[28]+B[7]*A[28]+A[9]*B[27]+B[9]*A[27]+A[12]*B[26]+B[12]*A[26]+A[2]*B[25]+B[2]*A[25]+A[3]*B[24]+B[3]*A[24]+A[16]*B[23]+B[16]*A[23]+A[4]*B[22]+B[4]*A[22]+A[17]*B[21]+B[17]*A[21]+A[18]*B[20]+B[18]*A[20]+A[5]*B[19]+B[5]*A[19]+A[8]*B[15]+B[8]*A[15]+A[10]*B[14]+B[10]*A[14]+A[11]*B[13]+B[11]*A[13]); 
  tmp[31] = 0.1767766952966368*(A[0]*B[31]+B[0]*A[31]+A[1]*B[30]+B[1]*A[30]+A[2]*B[29]+B[2]*A[29]+A[3]*B[28]+B[3]*A[28]+A[4]*B[27]+B[4]*A[27]+A[5]*B[26]+B[5]*A[26]+A[6]*B[25]+B[6]*A[25]+A[7]*B[24]+B[7]*A[24]+A[8]*B[23]+B[8]*A[23]+A[9]*B[22]+B[9]*A[22]+A[10]*B[21]+B[10]*A[21]+A[11]*B[20]+B[11]*A[20]+A[12]*B[19]+B[12]*A[19]+A[13]*B[18]+B[13]*A[18]+A[14]*B[17]+B[14]*A[17]+A[15]*B[16]+B[15]*A[16]); 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<32; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseMultiply3x2vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[32]; 
  tmp[0] = 0.3535533905932737*A[7]*B[16]+0.3535533905932737*A[6]*B[8]+0.3535533905932737*A[5]*B[7]+0.3535533905932737*A[4]*B[6]+0.3535533905932737*A[3]*B[3]+0.3535533905932737*A[2]*B[2]+0.3535533905932737*A[1]*B[1]+0.3535533905932737*A[0]*B[0]; 
  tmp[1] = 0.3535533905932737*A[6]*B[16]+0.3535533905932737*A[7]*B[8]+0.3535533905932737*A[3]*B[7]+0.3535533905932737*A[2]*B[6]+0.3535533905932737*B[3]*A[5]+0.3535533905932737*B[2]*A[4]+0.3535533905932737*A[0]*B[1]+0.3535533905932737*B[0]*A[1]; 
  tmp[2] = 0.3535533905932737*A[5]*B[16]+0.3535533905932737*A[3]*B[8]+0.3535533905932737*A[7]*B[7]+0.3535533905932737*A[1]*B[6]+0.3535533905932737*B[3]*A[6]+0.3535533905932737*B[1]*A[4]+0.3535533905932737*A[0]*B[2]+0.3535533905932737*B[0]*A[2]; 
  tmp[3] = 0.3535533905932737*A[4]*B[16]+0.3535533905932737*A[2]*B[8]+0.3535533905932737*A[1]*B[7]+0.3535533905932737*B[6]*A[7]+0.3535533905932737*B[2]*A[6]+0.3535533905932737*B[1]*A[5]+0.3535533905932737*A[0]*B[3]+0.3535533905932737*B[0]*A[3]; 
  tmp[4] = 0.3535533905932737*A[7]*B[26]+0.3535533905932737*A[6]*B[19]+0.3535533905932737*A[5]*B[18]+0.3535533905932737*A[4]*B[17]+0.3535533905932737*A[3]*B[11]+0.3535533905932737*A[2]*B[10]+0.3535533905932737*A[1]*B[9]+0.3535533905932737*A[0]*B[4]; 
  tmp[5] = 0.3535533905932737*A[7]*B[27]+0.3535533905932737*A[6]*B[22]+0.3535533905932737*A[5]*B[21]+0.3535533905932737*A[4]*B[20]+0.3535533905932737*A[3]*B[14]+0.3535533905932737*A[2]*B[13]+0.3535533905932737*A[1]*B[12]+0.3535533905932737*A[0]*B[5]; 
  tmp[6] = 0.3535533905932737*A[3]*B[16]+0.3535533905932737*A[5]*B[8]+0.3535533905932737*A[6]*B[7]+0.3535533905932737*B[3]*A[7]+0.3535533905932737*A[0]*B[6]+0.3535533905932737*B[0]*A[4]+0.3535533905932737*A[1]*B[2]+0.3535533905932737*B[1]*A[2]; 
  tmp[7] = 0.3535533905932737*A[2]*B[16]+0.3535533905932737*A[4]*B[8]+0.3535533905932737*A[0]*B[7]+0.3535533905932737*B[2]*A[7]+0.3535533905932737*A[6]*B[6]+0.3535533905932737*B[0]*A[5]+0.3535533905932737*A[1]*B[3]+0.3535533905932737*B[1]*A[3]; 
  tmp[8] = 0.3535533905932737*A[1]*B[16]+0.3535533905932737*A[0]*B[8]+0.3535533905932737*A[4]*B[7]+0.3535533905932737*B[1]*A[7]+0.3535533905932737*A[5]*B[6]+0.3535533905932737*B[0]*A[6]+0.3535533905932737*A[2]*B[3]+0.3535533905932737*B[2]*A[3]; 
  tmp[9] = 0.3535533905932737*A[6]*B[26]+0.3535533905932737*A[7]*B[19]+0.3535533905932737*A[3]*B[18]+0.3535533905932737*A[2]*B[17]+0.3535533905932737*A[5]*B[11]+0.3535533905932737*A[4]*B[10]+0.3535533905932737*A[0]*B[9]+0.3535533905932737*A[1]*B[4]; 
  tmp[10] = 0.3535533905932737*A[5]*B[26]+0.3535533905932737*A[3]*B[19]+0.3535533905932737*A[7]*B[18]+0.3535533905932737*A[1]*B[17]+0.3535533905932737*A[6]*B[11]+0.3535533905932737*A[0]*B[10]+0.3535533905932737*A[4]*B[9]+0.3535533905932737*A[2]*B[4]; 
  tmp[11] = 0.3535533905932737*A[4]*B[26]+0.3535533905932737*A[2]*B[19]+0.3535533905932737*A[1]*B[18]+0.3535533905932737*A[7]*B[17]+0.3535533905932737*A[0]*B[11]+0.3535533905932737*A[6]*B[10]+0.3535533905932737*A[5]*B[9]+0.3535533905932737*A[3]*B[4]; 
  tmp[12] = 0.3535533905932737*A[6]*B[27]+0.3535533905932737*A[7]*B[22]+0.3535533905932737*A[3]*B[21]+0.3535533905932737*A[2]*B[20]+0.3535533905932737*A[5]*B[14]+0.3535533905932737*A[4]*B[13]+0.3535533905932737*A[0]*B[12]+0.3535533905932737*A[1]*B[5]; 
  tmp[13] = 0.3535533905932737*A[5]*B[27]+0.3535533905932737*A[3]*B[22]+0.3535533905932737*A[7]*B[21]+0.3535533905932737*A[1]*B[20]+0.3535533905932737*A[6]*B[14]+0.3535533905932737*A[0]*B[13]+0.3535533905932737*A[4]*B[12]+0.3535533905932737*A[2]*B[5]; 
  tmp[14] = 0.3535533905932737*A[4]*B[27]+0.3535533905932737*A[2]*B[22]+0.3535533905932737*A[1]*B[21]+0.3535533905932737*A[7]*B[20]+0.3535533905932737*A[0]*B[14]+0.3535533905932737*A[6]*B[13]+0.3535533905932737*A[5]*B[12]+0.3535533905932737*A[3]*B[5]; 
  tmp[15] = 0.3535533905932737*A[7]*B[31]+0.3535533905932737*A[6]*B[30]+0.3535533905932737*A[5]*B[29]+0.3535533905932737*A[4]*B[28]+0.3535533905932737*A[3]*B[25]+0.3535533905932737*A[2]*B[24]+0.3535533905932737*A[1]*B[23]+0.3535533905932737*A[0]*B[15]; 
  tmp[16] = 0.3535533905932737*A[0]*B[16]+0.3535533905932737*A[1]*B[8]+0.3535533905932737*A[2]*B[7]+0.3535533905932737*B[0]*A[7]+0.3535533905932737*A[3]*B[6]+0.3535533905932737*B[1]*A[6]+0.3535533905932737*B[2]*A[5]+0.3535533905932737*B[3]*A[4]; 
  tmp[17] = 0.3535533905932737*A[3]*B[26]+0.3535533905932737*A[5]*B[19]+0.3535533905932737*A[6]*B[18]+0.3535533905932737*A[0]*B[17]+0.3535533905932737*A[7]*B[11]+0.3535533905932737*A[1]*B[10]+0.3535533905932737*A[2]*B[9]+0.3535533905932737*A[4]*B[4]; 
  tmp[18] = 0.3535533905932737*A[2]*B[26]+0.3535533905932737*A[4]*B[19]+0.3535533905932737*A[0]*B[18]+0.3535533905932737*A[6]*B[17]+0.3535533905932737*A[1]*B[11]+0.3535533905932737*A[7]*B[10]+0.3535533905932737*A[3]*B[9]+0.3535533905932737*B[4]*A[5]; 
  tmp[19] = 0.3535533905932737*A[1]*B[26]+0.3535533905932737*A[0]*B[19]+0.3535533905932737*A[4]*B[18]+0.3535533905932737*A[5]*B[17]+0.3535533905932737*A[2]*B[11]+0.3535533905932737*A[3]*B[10]+0.3535533905932737*A[7]*B[9]+0.3535533905932737*B[4]*A[6]; 
  tmp[20] = 0.3535533905932737*A[3]*B[27]+0.3535533905932737*A[5]*B[22]+0.3535533905932737*A[6]*B[21]+0.3535533905932737*A[0]*B[20]+0.3535533905932737*A[7]*B[14]+0.3535533905932737*A[1]*B[13]+0.3535533905932737*A[2]*B[12]+0.3535533905932737*A[4]*B[5]; 
  tmp[21] = 0.3535533905932737*A[2]*B[27]+0.3535533905932737*A[4]*B[22]+0.3535533905932737*A[0]*B[21]+0.3535533905932737*A[6]*B[20]+0.3535533905932737*A[1]*B[14]+0.3535533905932737*A[7]*B[13]+0.3535533905932737*A[3]*B[12]+0.3535533905932737*A[5]*B[5]; 
  tmp[22] = 0.3535533905932737*A[1]*B[27]+0.3535533905932737*A[0]*B[22]+0.3535533905932737*A[4]*B[21]+0.3535533905932737*A[5]*B[20]+0.3535533905932737*A[2]*B[14]+0.3535533905932737*A[3]*B[13]+0.3535533905932737*A[7]*B[12]+0.3535533905932737*B[5]*A[6]; 
  tmp[23] = 0.3535533905932737*A[6]*B[31]+0.3535533905932737*A[7]*B[30]+0.3535533905932737*A[3]*B[29]+0.3535533905932737*A[2]*B[28]+0.3535533905932737*A[5]*B[25]+0.3535533905932737*A[4]*B[24]+0.3535533905932737*A[0]*B[23]+0.3535533905932737*A[1]*B[15]; 
  tmp[24] = 0.3535533905932737*A[5]*B[31]+0.3535533905932737*A[3]*B[30]+0.3535533905932737*A[7]*B[29]+0.3535533905932737*A[1]*B[28]+0.3535533905932737*A[6]*B[25]+0.3535533905932737*A[0]*B[24]+0.3535533905932737*A[4]*B[23]+0.3535533905932737*A[2]*B[15]; 
  tmp[25] = 0.3535533905932737*A[4]*B[31]+0.3535533905932737*A[2]*B[30]+0.3535533905932737*A[1]*B[29]+0.3535533905932737*A[7]*B[28]+0.3535533905932737*A[0]*B[25]+0.3535533905932737*A[6]*B[24]+0.3535533905932737*A[5]*B[23]+0.3535533905932737*A[3]*B[15]; 
  tmp[26] = 0.3535533905932737*A[0]*B[26]+0.3535533905932737*A[1]*B[19]+0.3535533905932737*A[2]*B[18]+0.3535533905932737*A[3]*B[17]+0.3535533905932737*A[4]*B[11]+0.3535533905932737*A[5]*B[10]+0.3535533905932737*A[6]*B[9]+0.3535533905932737*B[4]*A[7]; 
  tmp[27] = 0.3535533905932737*A[0]*B[27]+0.3535533905932737*A[1]*B[22]+0.3535533905932737*A[2]*B[21]+0.3535533905932737*A[3]*B[20]+0.3535533905932737*A[4]*B[14]+0.3535533905932737*A[5]*B[13]+0.3535533905932737*A[6]*B[12]+0.3535533905932737*B[5]*A[7]; 
  tmp[28] = 0.3535533905932737*A[3]*B[31]+0.3535533905932737*A[5]*B[30]+0.3535533905932737*A[6]*B[29]+0.3535533905932737*A[0]*B[28]+0.3535533905932737*A[7]*B[25]+0.3535533905932737*A[1]*B[24]+0.3535533905932737*A[2]*B[23]+0.3535533905932737*A[4]*B[15]; 
  tmp[29] = 0.3535533905932737*A[2]*B[31]+0.3535533905932737*A[4]*B[30]+0.3535533905932737*A[0]*B[29]+0.3535533905932737*A[6]*B[28]+0.3535533905932737*A[1]*B[25]+0.3535533905932737*A[7]*B[24]+0.3535533905932737*A[3]*B[23]+0.3535533905932737*A[5]*B[15]; 
  tmp[30] = 0.3535533905932737*A[1]*B[31]+0.3535533905932737*A[0]*B[30]+0.3535533905932737*A[4]*B[29]+0.3535533905932737*A[5]*B[28]+0.3535533905932737*A[2]*B[25]+0.3535533905932737*A[3]*B[24]+0.3535533905932737*A[7]*B[23]+0.3535533905932737*A[6]*B[15]; 
  tmp[31] = 0.3535533905932737*A[0]*B[31]+0.3535533905932737*A[1]*B[30]+0.3535533905932737*A[2]*B[29]+0.3535533905932737*A[3]*B[28]+0.3535533905932737*A[4]*B[25]+0.3535533905932737*A[5]*B[24]+0.3535533905932737*A[6]*B[23]+0.3535533905932737*A[7]*B[15]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<32; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseDivide3x2vSer_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.837117307087383*A[7])+1.060660171779821*(A[6]+A[5]+A[4])-0.6123724356957944*(A[3]+A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]+1.060660171779821*A[6]-1.060660171779821*(A[5]+A[4])-0.6123724356957944*(A[3]+A[2])+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]-1.060660171779821*A[6]+1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]+0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])-1.060660171779821*(A[6]+A[5])+1.060660171779821*A[4]-0.6123724356957944*A[3]+0.6123724356957944*(A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]-1.060660171779821*(A[6]+A[5])+1.060660171779821*A[4]+0.6123724356957944*A[3]-0.6123724356957944*(A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])-1.060660171779821*A[6]+1.060660171779821*A[5]-1.060660171779821*A[4]+0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])+1.060660171779821*A[6]-1.060660171779821*(A[5]+A[4])+0.6123724356957944*(A[3]+A[2])-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]+1.060660171779821*(A[6]+A[5]+A[4])+0.6123724356957944*(A[3]+A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
 
  double As[8]; 
  double Bs[32]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = 0.0; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = 0.0; 
    Bs[15] = B[15]; 
    Bs[16] = 0.0; 
    Bs[17] = 0.0; 
    Bs[18] = 0.0; 
    Bs[19] = 0.0; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = 0.0; 
    Bs[26] = 0.0; 
    Bs[27] = 0.0; 
    Bs[28] = 0.0; 
    Bs[29] = 0.0; 
    Bs[30] = 0.0; 
    Bs[31] = 0.0; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
  } 
 
  // Fill AEM matrix. 
  data->AEM_D = Eigen::MatrixXd::Zero(32,32); 
  data->AEM_D(0,0) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,1) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,2) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,3) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,6) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,7) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,8) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,9) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,10) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,11) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,14) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,15) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,16) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,17) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,18) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,19) = 0.3535533905932737*As[6]; 
  data->AEM_D(0,22) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,23) = 0.3535533905932737*As[7]; 
  data->AEM_D(0,24) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,25) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,26) = 0.3535533905932737*As[6]; 
  data->AEM_D(0,27) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,30) = 0.3535533905932737*As[7]; 
  data->AEM_D(0,31) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,4) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,13) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,16) = 0.3535533905932737*As[4]; 
  data->AEM_D(1,17) = 0.3535533905932737*As[2]; 
  data->AEM_D(1,18) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,19) = 0.3535533905932737*As[7]; 
  data->AEM_D(1,22) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,23) = 0.3535533905932737*As[6]; 
  data->AEM_D(1,24) = 0.3535533905932737*As[5]; 
  data->AEM_D(1,25) = 0.3535533905932737*As[3]; 
  data->AEM_D(1,26) = 0.3535533905932737*As[7]; 
  data->AEM_D(1,27) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,30) = 0.3535533905932737*As[6]; 
  data->AEM_D(1,31) = 0.3535533905932737*As[0]; 
  data->AEM_D(2,0) = 0.3535533905932737*As[6]; 
  data->AEM_D(2,1) = 0.3535533905932737*As[7]; 
  data->AEM_D(2,2) = 0.3535533905932737*As[3]; 
  data->AEM_D(2,3) = 0.3535533905932737*As[2]; 
  data->AEM_D(2,6) = 0.3535533905932737*As[5]; 
  data->AEM_D(2,7) = 0.3535533905932737*As[4]; 
  data->AEM_D(2,12) = 0.3535533905932737*As[1]; 
  data->AEM_D(2,20) = 0.3535533905932737*As[2]; 
  data->AEM_D(2,28) = 0.3535533905932737*As[3]; 
  data->AEM_D(3,5) = 0.3535533905932737*As[1]; 
  data->AEM_D(3,13) = 0.3535533905932737*As[2]; 
  data->AEM_D(3,21) = 0.3535533905932737*As[3]; 
  data->AEM_D(4,0) = 0.3535533905932737*As[7]; 
  data->AEM_D(4,1) = 0.3535533905932737*As[6]; 
  data->AEM_D(4,2) = 0.3535533905932737*As[5]; 
  data->AEM_D(4,3) = 0.3535533905932737*As[4]; 
  data->AEM_D(4,6) = 0.3535533905932737*As[3]; 
  data->AEM_D(4,7) = 0.3535533905932737*As[2]; 
  data->AEM_D(4,12) = 0.3535533905932737*As[4]; 
  data->AEM_D(4,20) = 0.3535533905932737*As[5]; 
  data->AEM_D(4,28) = 0.3535533905932737*As[6]; 
  data->AEM_D(5,5) = 0.3535533905932737*As[4]; 
  data->AEM_D(5,13) = 0.3535533905932737*As[5]; 
  data->AEM_D(5,21) = 0.3535533905932737*As[6]; 
  data->AEM_D(6,20) = 0.3535533905932737*As[7]; 
  data->AEM_D(6,29) = 0.3535533905932737*As[7]; 
 
  // Fill BEV. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,32,1) = data->u_D; 
 
} 
 
void CartFieldBinOpMultiply3x2vSerInclVx2_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field. 
  // B:       scalar/vector field (must be vector if A is vector). 
  // Ncomp:   number of components of B (could be 1D, 2D, 3D, vector). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else. 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[32]; 
 
  tmp[0] = 0.1767766952966368*(A[32]*B[32]+A[31]*B[31]+A[30]*B[30]+A[29]*B[29]+A[28]*B[28]+A[27]*B[27]+A[26]*B[26]+A[25]*B[25]+A[24]*B[24]+A[23]*B[23]+A[22]*B[22]+A[21]*B[21]+A[20]*B[20]+A[19]*B[19]+A[18]*B[18]+A[17]*B[17]+A[16]*B[16]+A[15]*B[15]+A[14]*B[14]+A[13]*B[13]+A[12]*B[12]+A[11]*B[11]+A[10]*B[10]+A[9]*B[9]+A[8]*B[8]+A[7]*B[7]+A[6]*B[6]+A[5]*B[5]+A[4]*B[4]+A[3]*B[3]+A[2]*B[2]+A[1]*B[1]+A[0]*B[0]); 
  tmp[1] = 0.1767766952966368*(A[30]*B[31]+B[30]*A[31]+A[25]*B[29]+B[25]*A[29]+A[24]*B[28]+B[24]*A[28]+A[22]*B[27]+B[22]*A[27]+A[19]*B[26]+B[19]*A[26]+A[15]*B[23]+B[15]*A[23]+A[14]*B[21]+B[14]*A[21]+A[13]*B[20]+B[13]*A[20]+A[11]*B[18]+B[11]*A[18]+A[10]*B[17]+B[10]*A[17]+A[8]*B[16]+B[8]*A[16]+A[5]*B[12]+B[5]*A[12]+A[4]*B[9]+B[4]*A[9]+A[3]*B[7]+B[3]*A[7]+A[2]*B[6]+B[2]*A[6]+A[0]*B[1]+B[0]*A[1]); 
  tmp[2] = 0.1767766952966368*(A[29]*B[31]+B[29]*A[31]+A[25]*B[30]+B[25]*A[30]+A[23]*B[28]+B[23]*A[28]+A[21]*B[27]+B[21]*A[27]+A[18]*B[26]+B[18]*A[26]+A[15]*B[24]+B[15]*A[24]+A[14]*B[22]+B[14]*A[22]+A[12]*B[20]+B[12]*A[20]+A[11]*B[19]+B[11]*A[19]+A[9]*B[17]+B[9]*A[17]+A[7]*B[16]+B[7]*A[16]+A[5]*B[13]+B[5]*A[13]+A[4]*B[10]+B[4]*A[10]+A[3]*B[8]+B[3]*A[8]+A[1]*B[6]+B[1]*A[6]+A[0]*B[2]+B[0]*A[2]); 
  tmp[3] = 0.1767766952966368*(A[28]*B[31]+B[28]*A[31]+A[24]*B[30]+B[24]*A[30]+A[23]*B[29]+B[23]*A[29]+A[20]*B[27]+B[20]*A[27]+A[17]*B[26]+B[17]*A[26]+A[15]*B[25]+B[15]*A[25]+A[13]*B[22]+B[13]*A[22]+A[12]*B[21]+B[12]*A[21]+A[10]*B[19]+B[10]*A[19]+A[9]*B[18]+B[9]*A[18]+A[6]*B[16]+B[6]*A[16]+A[5]*B[14]+B[5]*A[14]+A[4]*B[11]+B[4]*A[11]+A[2]*B[8]+B[2]*A[8]+A[1]*B[7]+B[1]*A[7]+A[0]*B[3]+B[0]*A[3]); 
  tmp[4] = 0.03535533905932736*(4.47213595499958*(A[4]*B[32]+B[4]*A[32])+5.0*(A[27]*B[31]+B[27]*A[31]+A[22]*B[30]+B[22]*A[30]+A[21]*B[29]+B[21]*A[29]+A[20]*B[28]+B[20]*A[28]+A[16]*B[26]+B[16]*A[26]+A[14]*B[25]+B[14]*A[25]+A[13]*B[24]+B[13]*A[24]+A[12]*B[23]+B[12]*A[23]+A[8]*B[19]+B[8]*A[19]+A[7]*B[18]+B[7]*A[18]+A[6]*B[17]+B[6]*A[17]+A[5]*B[15]+B[5]*A[15]+A[3]*B[11]+B[3]*A[11]+A[2]*B[10]+B[2]*A[10]+A[1]*B[9]+B[1]*A[9]+A[0]*B[4]+B[0]*A[4])); 
  tmp[5] = 0.1767766952966368*(A[26]*B[31]+B[26]*A[31]+A[19]*B[30]+B[19]*A[30]+A[18]*B[29]+B[18]*A[29]+A[17]*B[28]+B[17]*A[28]+A[16]*B[27]+B[16]*A[27]+A[11]*B[25]+B[11]*A[25]+A[10]*B[24]+B[10]*A[24]+A[9]*B[23]+B[9]*A[23]+A[8]*B[22]+B[8]*A[22]+A[7]*B[21]+B[7]*A[21]+A[6]*B[20]+B[6]*A[20]+A[4]*B[15]+B[4]*A[15]+A[3]*B[14]+B[3]*A[14]+A[2]*B[13]+B[2]*A[13]+A[1]*B[12]+B[1]*A[12]+A[0]*B[5]+B[0]*A[5]); 
  tmp[6] = 0.1767766952966368*(A[25]*B[31]+B[25]*A[31]+A[29]*B[30]+B[29]*A[30]+A[15]*B[28]+B[15]*A[28]+A[14]*B[27]+B[14]*A[27]+A[11]*B[26]+B[11]*A[26]+A[23]*B[24]+B[23]*A[24]+A[21]*B[22]+B[21]*A[22]+A[5]*B[20]+B[5]*A[20]+A[18]*B[19]+B[18]*A[19]+A[4]*B[17]+B[4]*A[17]+A[3]*B[16]+B[3]*A[16]+A[12]*B[13]+B[12]*A[13]+A[9]*B[10]+B[9]*A[10]+A[7]*B[8]+B[7]*A[8]+A[0]*B[6]+B[0]*A[6]+A[1]*B[2]+B[1]*A[2]); 
  tmp[7] = 0.1767766952966368*(A[24]*B[31]+B[24]*A[31]+A[28]*B[30]+B[28]*A[30]+A[15]*B[29]+B[15]*A[29]+A[13]*B[27]+B[13]*A[27]+A[10]*B[26]+B[10]*A[26]+A[23]*B[25]+B[23]*A[25]+A[20]*B[22]+B[20]*A[22]+A[5]*B[21]+B[5]*A[21]+A[17]*B[19]+B[17]*A[19]+A[4]*B[18]+B[4]*A[18]+A[2]*B[16]+B[2]*A[16]+A[12]*B[14]+B[12]*A[14]+A[9]*B[11]+B[9]*A[11]+A[6]*B[8]+B[6]*A[8]+A[0]*B[7]+B[0]*A[7]+A[1]*B[3]+B[1]*A[3]); 
  tmp[8] = 0.1767766952966368*(A[23]*B[31]+B[23]*A[31]+A[15]*B[30]+B[15]*A[30]+A[28]*B[29]+B[28]*A[29]+A[12]*B[27]+B[12]*A[27]+A[9]*B[26]+B[9]*A[26]+A[24]*B[25]+B[24]*A[25]+A[5]*B[22]+B[5]*A[22]+A[20]*B[21]+B[20]*A[21]+A[4]*B[19]+B[4]*A[19]+A[17]*B[18]+B[17]*A[18]+A[1]*B[16]+B[1]*A[16]+A[13]*B[14]+B[13]*A[14]+A[10]*B[11]+B[10]*A[11]+A[0]*B[8]+B[0]*A[8]+A[6]*B[7]+B[6]*A[7]+A[2]*B[3]+B[2]*A[3]); 
  tmp[9] = 0.03535533905932736*(4.47213595499958*(A[9]*B[32]+B[9]*A[32])+5.0*(A[22]*B[31]+B[22]*A[31]+A[27]*B[30]+B[27]*A[30]+A[14]*B[29]+B[14]*A[29]+A[13]*B[28]+B[13]*A[28]+A[8]*B[26]+B[8]*A[26]+A[21]*B[25]+B[21]*A[25]+A[20]*B[24]+B[20]*A[24]+A[5]*B[23]+B[5]*A[23]+A[16]*B[19]+B[16]*A[19]+A[3]*B[18]+B[3]*A[18]+A[2]*B[17]+B[2]*A[17]+A[12]*B[15]+B[12]*A[15]+A[7]*B[11]+B[7]*A[11]+A[6]*B[10]+B[6]*A[10]+A[0]*B[9]+B[0]*A[9]+A[1]*B[4]+B[1]*A[4])); 
  tmp[10] = 0.03535533905932736*(4.47213595499958*(A[10]*B[32]+B[10]*A[32])+5.0*(A[21]*B[31]+B[21]*A[31]+A[14]*B[30]+B[14]*A[30]+A[27]*B[29]+B[27]*A[29]+A[12]*B[28]+B[12]*A[28]+A[7]*B[26]+B[7]*A[26]+A[22]*B[25]+B[22]*A[25]+A[5]*B[24]+B[5]*A[24]+A[20]*B[23]+B[20]*A[23]+A[3]*B[19]+B[3]*A[19]+A[16]*B[18]+B[16]*A[18]+A[1]*B[17]+B[1]*A[17]+A[13]*B[15]+B[13]*A[15]+A[8]*B[11]+B[8]*A[11]+A[0]*B[10]+B[0]*A[10]+A[6]*B[9]+B[6]*A[9]+A[2]*B[4]+B[2]*A[4])); 
  tmp[11] = 0.03535533905932736*(4.47213595499958*(A[11]*B[32]+B[11]*A[32])+5.0*(A[20]*B[31]+B[20]*A[31]+A[13]*B[30]+B[13]*A[30]+A[12]*B[29]+B[12]*A[29]+A[27]*B[28]+B[27]*A[28]+A[6]*B[26]+B[6]*A[26]+A[5]*B[25]+B[5]*A[25]+A[22]*B[24]+B[22]*A[24]+A[21]*B[23]+B[21]*A[23]+A[2]*B[19]+B[2]*A[19]+A[1]*B[18]+B[1]*A[18]+A[16]*B[17]+B[16]*A[17]+A[14]*B[15]+B[14]*A[15]+A[0]*B[11]+B[0]*A[11]+A[8]*B[10]+B[8]*A[10]+A[7]*B[9]+B[7]*A[9]+A[3]*B[4]+B[3]*A[4])); 
  tmp[12] = 0.1767766952966368*(A[19]*B[31]+B[19]*A[31]+A[26]*B[30]+B[26]*A[30]+A[11]*B[29]+B[11]*A[29]+A[10]*B[28]+B[10]*A[28]+A[8]*B[27]+B[8]*A[27]+A[18]*B[25]+B[18]*A[25]+A[17]*B[24]+B[17]*A[24]+A[4]*B[23]+B[4]*A[23]+A[16]*B[22]+B[16]*A[22]+A[3]*B[21]+B[3]*A[21]+A[2]*B[20]+B[2]*A[20]+A[9]*B[15]+B[9]*A[15]+A[7]*B[14]+B[7]*A[14]+A[6]*B[13]+B[6]*A[13]+A[0]*B[12]+B[0]*A[12]+A[1]*B[5]+B[1]*A[5]); 
  tmp[13] = 0.1767766952966368*(A[18]*B[31]+B[18]*A[31]+A[11]*B[30]+B[11]*A[30]+A[26]*B[29]+B[26]*A[29]+A[9]*B[28]+B[9]*A[28]+A[7]*B[27]+B[7]*A[27]+A[19]*B[25]+B[19]*A[25]+A[4]*B[24]+B[4]*A[24]+A[17]*B[23]+B[17]*A[23]+A[3]*B[22]+B[3]*A[22]+A[16]*B[21]+B[16]*A[21]+A[1]*B[20]+B[1]*A[20]+A[10]*B[15]+B[10]*A[15]+A[8]*B[14]+B[8]*A[14]+A[0]*B[13]+B[0]*A[13]+A[6]*B[12]+B[6]*A[12]+A[2]*B[5]+B[2]*A[5]); 
  tmp[14] = 0.1767766952966368*(A[17]*B[31]+B[17]*A[31]+A[10]*B[30]+B[10]*A[30]+A[9]*B[29]+B[9]*A[29]+A[26]*B[28]+B[26]*A[28]+A[6]*B[27]+B[6]*A[27]+A[4]*B[25]+B[4]*A[25]+A[19]*B[24]+B[19]*A[24]+A[18]*B[23]+B[18]*A[23]+A[2]*B[22]+B[2]*A[22]+A[1]*B[21]+B[1]*A[21]+A[16]*B[20]+B[16]*A[20]+A[11]*B[15]+B[11]*A[15]+A[0]*B[14]+B[0]*A[14]+A[8]*B[13]+B[8]*A[13]+A[7]*B[12]+B[7]*A[12]+A[3]*B[5]+B[3]*A[5]); 
  tmp[15] = 0.03535533905932736*(4.47213595499958*(A[15]*B[32]+B[15]*A[32])+5.0*(A[16]*B[31]+B[16]*A[31]+A[8]*B[30]+B[8]*A[30]+A[7]*B[29]+B[7]*A[29]+A[6]*B[28]+B[6]*A[28]+A[26]*B[27]+B[26]*A[27]+A[3]*B[25]+B[3]*A[25]+A[2]*B[24]+B[2]*A[24]+A[1]*B[23]+B[1]*A[23]+A[19]*B[22]+B[19]*A[22]+A[18]*B[21]+B[18]*A[21]+A[17]*B[20]+B[17]*A[20]+A[0]*B[15]+B[0]*A[15]+A[11]*B[14]+B[11]*A[14]+A[10]*B[13]+B[10]*A[13]+A[9]*B[12]+B[9]*A[12]+A[4]*B[5]+B[4]*A[5])); 
  tmp[16] = 0.1767766952966368*(A[15]*B[31]+B[15]*A[31]+A[23]*B[30]+B[23]*A[30]+A[24]*B[29]+B[24]*A[29]+A[25]*B[28]+B[25]*A[28]+A[5]*B[27]+B[5]*A[27]+A[4]*B[26]+B[4]*A[26]+A[12]*B[22]+B[12]*A[22]+A[13]*B[21]+B[13]*A[21]+A[14]*B[20]+B[14]*A[20]+A[9]*B[19]+B[9]*A[19]+A[10]*B[18]+B[10]*A[18]+A[11]*B[17]+B[11]*A[17]+A[0]*B[16]+B[0]*A[16]+A[1]*B[8]+B[1]*A[8]+A[2]*B[7]+B[2]*A[7]+A[3]*B[6]+B[3]*A[6]); 
  tmp[17] = 0.03535533905932736*(4.47213595499958*(A[17]*B[32]+B[17]*A[32])+5.0*(A[14]*B[31]+B[14]*A[31]+A[21]*B[30]+B[21]*A[30]+A[22]*B[29]+B[22]*A[29]+A[5]*B[28]+B[5]*A[28]+A[25]*B[27]+B[25]*A[27]+A[3]*B[26]+B[3]*A[26]+A[12]*B[24]+B[12]*A[24]+A[13]*B[23]+B[13]*A[23]+A[15]*B[20]+B[15]*A[20]+A[7]*B[19]+B[7]*A[19]+A[8]*B[18]+B[8]*A[18]+A[0]*B[17]+B[0]*A[17]+A[11]*B[16]+B[11]*A[16]+A[1]*B[10]+B[1]*A[10]+A[2]*B[9]+B[2]*A[9]+A[4]*B[6]+B[4]*A[6])); 
  tmp[18] = 0.03535533905932736*(4.47213595499958*(A[18]*B[32]+B[18]*A[32])+5.0*(A[13]*B[31]+B[13]*A[31]+A[20]*B[30]+B[20]*A[30]+A[5]*B[29]+B[5]*A[29]+A[22]*B[28]+B[22]*A[28]+A[24]*B[27]+B[24]*A[27]+A[2]*B[26]+B[2]*A[26]+A[12]*B[25]+B[12]*A[25]+A[14]*B[23]+B[14]*A[23]+A[15]*B[21]+B[15]*A[21]+A[6]*B[19]+B[6]*A[19]+A[0]*B[18]+B[0]*A[18]+A[8]*B[17]+B[8]*A[17]+A[10]*B[16]+B[10]*A[16]+A[1]*B[11]+B[1]*A[11]+A[3]*B[9]+B[3]*A[9]+A[4]*B[7]+B[4]*A[7])); 
  tmp[19] = 0.03535533905932736*(4.47213595499958*(A[19]*B[32]+B[19]*A[32])+5.0*(A[12]*B[31]+B[12]*A[31]+A[5]*B[30]+B[5]*A[30]+A[20]*B[29]+B[20]*A[29]+A[21]*B[28]+B[21]*A[28]+A[23]*B[27]+B[23]*A[27]+A[1]*B[26]+B[1]*A[26]+A[13]*B[25]+B[13]*A[25]+A[14]*B[24]+B[14]*A[24]+A[15]*B[22]+B[15]*A[22]+A[0]*B[19]+B[0]*A[19]+A[6]*B[18]+B[6]*A[18]+A[7]*B[17]+B[7]*A[17]+A[9]*B[16]+B[9]*A[16]+A[2]*B[11]+B[2]*A[11]+A[3]*B[10]+B[3]*A[10]+A[4]*B[8]+B[4]*A[8])); 
  tmp[20] = 0.1767766952966368*(A[11]*B[31]+B[11]*A[31]+A[18]*B[30]+B[18]*A[30]+A[19]*B[29]+B[19]*A[29]+A[4]*B[28]+B[4]*A[28]+A[3]*B[27]+B[3]*A[27]+A[25]*B[26]+B[25]*A[26]+A[9]*B[24]+B[9]*A[24]+A[10]*B[23]+B[10]*A[23]+A[7]*B[22]+B[7]*A[22]+A[8]*B[21]+B[8]*A[21]+A[0]*B[20]+B[0]*A[20]+A[15]*B[17]+B[15]*A[17]+A[14]*B[16]+B[14]*A[16]+A[1]*B[13]+B[1]*A[13]+A[2]*B[12]+B[2]*A[12]+A[5]*B[6]+B[5]*A[6]); 
  tmp[21] = 0.1767766952966368*(A[10]*B[31]+B[10]*A[31]+A[17]*B[30]+B[17]*A[30]+A[4]*B[29]+B[4]*A[29]+A[19]*B[28]+B[19]*A[28]+A[2]*B[27]+B[2]*A[27]+A[24]*B[26]+B[24]*A[26]+A[9]*B[25]+B[9]*A[25]+A[11]*B[23]+B[11]*A[23]+A[6]*B[22]+B[6]*A[22]+A[0]*B[21]+B[0]*A[21]+A[8]*B[20]+B[8]*A[20]+A[15]*B[18]+B[15]*A[18]+A[13]*B[16]+B[13]*A[16]+A[1]*B[14]+B[1]*A[14]+A[3]*B[12]+B[3]*A[12]+A[5]*B[7]+B[5]*A[7]); 
  tmp[22] = 0.1767766952966368*(A[9]*B[31]+B[9]*A[31]+A[4]*B[30]+B[4]*A[30]+A[17]*B[29]+B[17]*A[29]+A[18]*B[28]+B[18]*A[28]+A[1]*B[27]+B[1]*A[27]+A[23]*B[26]+B[23]*A[26]+A[10]*B[25]+B[10]*A[25]+A[11]*B[24]+B[11]*A[24]+A[0]*B[22]+B[0]*A[22]+A[6]*B[21]+B[6]*A[21]+A[7]*B[20]+B[7]*A[20]+A[15]*B[19]+B[15]*A[19]+A[12]*B[16]+B[12]*A[16]+A[2]*B[14]+B[2]*A[14]+A[3]*B[13]+B[3]*A[13]+A[5]*B[8]+B[5]*A[8]); 
  tmp[23] = 0.03535533905932736*(4.47213595499958*(A[23]*B[32]+B[23]*A[32])+5.0*(A[8]*B[31]+B[8]*A[31]+A[16]*B[30]+B[16]*A[30]+A[3]*B[29]+B[3]*A[29]+A[2]*B[28]+B[2]*A[28]+A[19]*B[27]+B[19]*A[27]+A[22]*B[26]+B[22]*A[26]+A[7]*B[25]+B[7]*A[25]+A[6]*B[24]+B[6]*A[24]+A[0]*B[23]+B[0]*A[23]+A[11]*B[21]+B[11]*A[21]+A[10]*B[20]+B[10]*A[20]+A[14]*B[18]+B[14]*A[18]+A[13]*B[17]+B[13]*A[17]+A[1]*B[15]+B[1]*A[15]+A[4]*B[12]+B[4]*A[12]+A[5]*B[9]+B[5]*A[9])); 
  tmp[24] = 0.03535533905932736*(4.47213595499958*(A[24]*B[32]+B[24]*A[32])+5.0*(A[7]*B[31]+B[7]*A[31]+A[3]*B[30]+B[3]*A[30]+A[16]*B[29]+B[16]*A[29]+A[1]*B[28]+B[1]*A[28]+A[18]*B[27]+B[18]*A[27]+A[21]*B[26]+B[21]*A[26]+A[8]*B[25]+B[8]*A[25]+A[0]*B[24]+B[0]*A[24]+A[6]*B[23]+B[6]*A[23]+A[11]*B[22]+B[11]*A[22]+A[9]*B[20]+B[9]*A[20]+A[14]*B[19]+B[14]*A[19]+A[12]*B[17]+B[12]*A[17]+A[2]*B[15]+B[2]*A[15]+A[4]*B[13]+B[4]*A[13]+A[5]*B[10]+B[5]*A[10])); 
  tmp[25] = 0.03535533905932736*(4.47213595499958*(A[25]*B[32]+B[25]*A[32])+5.0*(A[6]*B[31]+B[6]*A[31]+A[2]*B[30]+B[2]*A[30]+A[1]*B[29]+B[1]*A[29]+A[16]*B[28]+B[16]*A[28]+A[17]*B[27]+B[17]*A[27]+A[20]*B[26]+B[20]*A[26]+A[0]*B[25]+B[0]*A[25]+A[8]*B[24]+B[8]*A[24]+A[7]*B[23]+B[7]*A[23]+A[10]*B[22]+B[10]*A[22]+A[9]*B[21]+B[9]*A[21]+A[13]*B[19]+B[13]*A[19]+A[12]*B[18]+B[12]*A[18]+A[3]*B[15]+B[3]*A[15]+A[4]*B[14]+B[4]*A[14]+A[5]*B[11]+B[5]*A[11])); 
  tmp[26] = 0.03535533905932736*(4.47213595499958*(A[26]*B[32]+B[26]*A[32])+5.0*(A[5]*B[31]+B[5]*A[31]+A[12]*B[30]+B[12]*A[30]+A[13]*B[29]+B[13]*A[29]+A[14]*B[28]+B[14]*A[28]+A[15]*B[27]+B[15]*A[27]+A[0]*B[26]+B[0]*A[26]+A[20]*B[25]+B[20]*A[25]+A[21]*B[24]+B[21]*A[24]+A[22]*B[23]+B[22]*A[23]+A[1]*B[19]+B[1]*A[19]+A[2]*B[18]+B[2]*A[18]+A[3]*B[17]+B[3]*A[17]+A[4]*B[16]+B[4]*A[16]+A[6]*B[11]+B[6]*A[11]+A[7]*B[10]+B[7]*A[10]+A[8]*B[9]+B[8]*A[9])); 
  tmp[27] = 0.1767766952966368*(A[4]*B[31]+B[4]*A[31]+A[9]*B[30]+B[9]*A[30]+A[10]*B[29]+B[10]*A[29]+A[11]*B[28]+B[11]*A[28]+A[0]*B[27]+B[0]*A[27]+A[15]*B[26]+B[15]*A[26]+A[17]*B[25]+B[17]*A[25]+A[18]*B[24]+B[18]*A[24]+A[19]*B[23]+B[19]*A[23]+A[1]*B[22]+B[1]*A[22]+A[2]*B[21]+B[2]*A[21]+A[3]*B[20]+B[3]*A[20]+A[5]*B[16]+B[5]*A[16]+A[6]*B[14]+B[6]*A[14]+A[7]*B[13]+B[7]*A[13]+A[8]*B[12]+B[8]*A[12]); 
  tmp[28] = 0.03535533905932736*(4.47213595499958*(A[28]*B[32]+B[28]*A[32])+5.0*(A[3]*B[31]+B[3]*A[31]+A[7]*B[30]+B[7]*A[30]+A[8]*B[29]+B[8]*A[29]+A[0]*B[28]+B[0]*A[28]+A[11]*B[27]+B[11]*A[27]+A[14]*B[26]+B[14]*A[26]+A[16]*B[25]+B[16]*A[25]+A[1]*B[24]+B[1]*A[24]+A[2]*B[23]+B[2]*A[23]+A[18]*B[22]+B[18]*A[22]+A[19]*B[21]+B[19]*A[21]+A[4]*B[20]+B[4]*A[20]+A[5]*B[17]+B[5]*A[17]+A[6]*B[15]+B[6]*A[15]+A[9]*B[13]+B[9]*A[13]+A[10]*B[12]+B[10]*A[12])); 
  tmp[29] = 0.03535533905932736*(4.47213595499958*(A[29]*B[32]+B[29]*A[32])+5.0*(A[2]*B[31]+B[2]*A[31]+A[6]*B[30]+B[6]*A[30]+A[0]*B[29]+B[0]*A[29]+A[8]*B[28]+B[8]*A[28]+A[10]*B[27]+B[10]*A[27]+A[13]*B[26]+B[13]*A[26]+A[1]*B[25]+B[1]*A[25]+A[16]*B[24]+B[16]*A[24]+A[3]*B[23]+B[3]*A[23]+A[17]*B[22]+B[17]*A[22]+A[4]*B[21]+B[4]*A[21]+A[19]*B[20]+B[19]*A[20]+A[5]*B[18]+B[5]*A[18]+A[7]*B[15]+B[7]*A[15]+A[9]*B[14]+B[9]*A[14]+A[11]*B[12]+B[11]*A[12])); 
  tmp[30] = 0.03535533905932736*(4.47213595499958*(A[30]*B[32]+B[30]*A[32])+5.0*(A[1]*B[31]+B[1]*A[31]+A[0]*B[30]+B[0]*A[30]+A[6]*B[29]+B[6]*A[29]+A[7]*B[28]+B[7]*A[28]+A[9]*B[27]+B[9]*A[27]+A[12]*B[26]+B[12]*A[26]+A[2]*B[25]+B[2]*A[25]+A[3]*B[24]+B[3]*A[24]+A[16]*B[23]+B[16]*A[23]+A[4]*B[22]+B[4]*A[22]+A[17]*B[21]+B[17]*A[21]+A[18]*B[20]+B[18]*A[20]+A[5]*B[19]+B[5]*A[19]+A[8]*B[15]+B[8]*A[15]+A[10]*B[14]+B[10]*A[14]+A[11]*B[13]+B[11]*A[13])); 
  tmp[31] = 0.03535533905932736*(4.47213595499958*(A[31]*B[32]+B[31]*A[32])+5.0*(A[0]*B[31]+B[0]*A[31]+A[1]*B[30]+B[1]*A[30]+A[2]*B[29]+B[2]*A[29]+A[3]*B[28]+B[3]*A[28]+A[4]*B[27]+B[4]*A[27]+A[5]*B[26]+B[5]*A[26]+A[6]*B[25]+B[6]*A[25]+A[7]*B[24]+B[7]*A[24]+A[8]*B[23]+B[8]*A[23]+A[9]*B[22]+B[9]*A[22]+A[10]*B[21]+B[10]*A[21]+A[11]*B[20]+B[11]*A[20]+A[12]*B[19]+B[12]*A[19]+A[13]*B[18]+B[13]*A[18]+A[14]*B[17]+B[14]*A[17]+A[15]*B[16]+B[15]*A[16])); 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<32; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseMultiply3x2vSerInclVx2_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       scalar/vector field in configuration space. 
  // B:       scalar field in phase space. 
  // Ncomp:   number of components of B (should =1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (should=1 here). 
  // out:     output field A*B (same number of components as B). 
 
  double tmp[33]; 
  tmp[0] = 0.3535533905932737*A[7]*B[16]+0.3535533905932737*A[6]*B[8]+0.3535533905932737*A[5]*B[7]+0.3535533905932737*A[4]*B[6]+0.3535533905932737*A[3]*B[3]+0.3535533905932737*A[2]*B[2]+0.3535533905932737*A[1]*B[1]+0.3535533905932737*A[0]*B[0]; 
  tmp[1] = 0.3535533905932737*A[6]*B[16]+0.3535533905932737*A[7]*B[8]+0.3535533905932737*A[3]*B[7]+0.3535533905932737*A[2]*B[6]+0.3535533905932737*B[3]*A[5]+0.3535533905932737*B[2]*A[4]+0.3535533905932737*A[0]*B[1]+0.3535533905932737*B[0]*A[1]; 
  tmp[2] = 0.3535533905932737*A[5]*B[16]+0.3535533905932737*A[3]*B[8]+0.3535533905932737*A[7]*B[7]+0.3535533905932737*A[1]*B[6]+0.3535533905932737*B[3]*A[6]+0.3535533905932737*B[1]*A[4]+0.3535533905932737*A[0]*B[2]+0.3535533905932737*B[0]*A[2]; 
  tmp[3] = 0.3535533905932737*A[4]*B[16]+0.3535533905932737*A[2]*B[8]+0.3535533905932737*A[1]*B[7]+0.3535533905932737*B[6]*A[7]+0.3535533905932737*B[2]*A[6]+0.3535533905932737*B[1]*A[5]+0.3535533905932737*A[0]*B[3]+0.3535533905932737*B[0]*A[3]; 
  tmp[4] = 0.3535533905932737*A[7]*B[26]+0.3535533905932737*A[6]*B[19]+0.3535533905932737*A[5]*B[18]+0.3535533905932737*A[4]*B[17]+0.3535533905932737*A[3]*B[11]+0.3535533905932737*A[2]*B[10]+0.3535533905932737*A[1]*B[9]+0.3535533905932737*A[0]*B[4]; 
  tmp[5] = 0.3535533905932737*A[7]*B[27]+0.3535533905932737*A[6]*B[22]+0.3535533905932737*A[5]*B[21]+0.3535533905932737*A[4]*B[20]+0.3535533905932737*A[3]*B[14]+0.3535533905932737*A[2]*B[13]+0.3535533905932737*A[1]*B[12]+0.3535533905932737*A[0]*B[5]; 
  tmp[6] = 0.3535533905932737*A[3]*B[16]+0.3535533905932737*A[5]*B[8]+0.3535533905932737*A[6]*B[7]+0.3535533905932737*B[3]*A[7]+0.3535533905932737*A[0]*B[6]+0.3535533905932737*B[0]*A[4]+0.3535533905932737*A[1]*B[2]+0.3535533905932737*B[1]*A[2]; 
  tmp[7] = 0.3535533905932737*A[2]*B[16]+0.3535533905932737*A[4]*B[8]+0.3535533905932737*A[0]*B[7]+0.3535533905932737*B[2]*A[7]+0.3535533905932737*A[6]*B[6]+0.3535533905932737*B[0]*A[5]+0.3535533905932737*A[1]*B[3]+0.3535533905932737*B[1]*A[3]; 
  tmp[8] = 0.3535533905932737*A[1]*B[16]+0.3535533905932737*A[0]*B[8]+0.3535533905932737*A[4]*B[7]+0.3535533905932737*B[1]*A[7]+0.3535533905932737*A[5]*B[6]+0.3535533905932737*B[0]*A[6]+0.3535533905932737*A[2]*B[3]+0.3535533905932737*B[2]*A[3]; 
  tmp[9] = 0.3535533905932737*A[6]*B[26]+0.3535533905932737*A[7]*B[19]+0.3535533905932737*A[3]*B[18]+0.3535533905932737*A[2]*B[17]+0.3535533905932737*A[5]*B[11]+0.3535533905932737*A[4]*B[10]+0.3535533905932737*A[0]*B[9]+0.3535533905932737*A[1]*B[4]; 
  tmp[10] = 0.3535533905932737*A[5]*B[26]+0.3535533905932737*A[3]*B[19]+0.3535533905932737*A[7]*B[18]+0.3535533905932737*A[1]*B[17]+0.3535533905932737*A[6]*B[11]+0.3535533905932737*A[0]*B[10]+0.3535533905932737*A[4]*B[9]+0.3535533905932737*A[2]*B[4]; 
  tmp[11] = 0.3535533905932737*A[4]*B[26]+0.3535533905932737*A[2]*B[19]+0.3535533905932737*A[1]*B[18]+0.3535533905932737*A[7]*B[17]+0.3535533905932737*A[0]*B[11]+0.3535533905932737*A[6]*B[10]+0.3535533905932737*A[5]*B[9]+0.3535533905932737*A[3]*B[4]; 
  tmp[12] = 0.3535533905932737*A[6]*B[27]+0.3535533905932737*A[7]*B[22]+0.3535533905932737*A[3]*B[21]+0.3535533905932737*A[2]*B[20]+0.3535533905932737*A[5]*B[14]+0.3535533905932737*A[4]*B[13]+0.3535533905932737*A[0]*B[12]+0.3535533905932737*A[1]*B[5]; 
  tmp[13] = 0.3535533905932737*A[5]*B[27]+0.3535533905932737*A[3]*B[22]+0.3535533905932737*A[7]*B[21]+0.3535533905932737*A[1]*B[20]+0.3535533905932737*A[6]*B[14]+0.3535533905932737*A[0]*B[13]+0.3535533905932737*A[4]*B[12]+0.3535533905932737*A[2]*B[5]; 
  tmp[14] = 0.3535533905932737*A[4]*B[27]+0.3535533905932737*A[2]*B[22]+0.3535533905932737*A[1]*B[21]+0.3535533905932737*A[7]*B[20]+0.3535533905932737*A[0]*B[14]+0.3535533905932737*A[6]*B[13]+0.3535533905932737*A[5]*B[12]+0.3535533905932737*A[3]*B[5]; 
  tmp[15] = 0.3535533905932737*A[7]*B[31]+0.3535533905932737*A[6]*B[30]+0.3535533905932737*A[5]*B[29]+0.3535533905932737*A[4]*B[28]+0.3535533905932737*A[3]*B[25]+0.3535533905932737*A[2]*B[24]+0.3535533905932737*A[1]*B[23]+0.3535533905932737*A[0]*B[15]; 
  tmp[16] = 0.3535533905932737*A[0]*B[16]+0.3535533905932737*A[1]*B[8]+0.3535533905932737*A[2]*B[7]+0.3535533905932737*B[0]*A[7]+0.3535533905932737*A[3]*B[6]+0.3535533905932737*B[1]*A[6]+0.3535533905932737*B[2]*A[5]+0.3535533905932737*B[3]*A[4]; 
  tmp[17] = 0.3535533905932737*A[3]*B[26]+0.3535533905932737*A[5]*B[19]+0.3535533905932737*A[6]*B[18]+0.3535533905932737*A[0]*B[17]+0.3535533905932737*A[7]*B[11]+0.3535533905932737*A[1]*B[10]+0.3535533905932737*A[2]*B[9]+0.3535533905932737*A[4]*B[4]; 
  tmp[18] = 0.3535533905932737*A[2]*B[26]+0.3535533905932737*A[4]*B[19]+0.3535533905932737*A[0]*B[18]+0.3535533905932737*A[6]*B[17]+0.3535533905932737*A[1]*B[11]+0.3535533905932737*A[7]*B[10]+0.3535533905932737*A[3]*B[9]+0.3535533905932737*B[4]*A[5]; 
  tmp[19] = 0.3535533905932737*A[1]*B[26]+0.3535533905932737*A[0]*B[19]+0.3535533905932737*A[4]*B[18]+0.3535533905932737*A[5]*B[17]+0.3535533905932737*A[2]*B[11]+0.3535533905932737*A[3]*B[10]+0.3535533905932737*A[7]*B[9]+0.3535533905932737*B[4]*A[6]; 
  tmp[20] = 0.3535533905932737*A[3]*B[27]+0.3535533905932737*A[5]*B[22]+0.3535533905932737*A[6]*B[21]+0.3535533905932737*A[0]*B[20]+0.3535533905932737*A[7]*B[14]+0.3535533905932737*A[1]*B[13]+0.3535533905932737*A[2]*B[12]+0.3535533905932737*A[4]*B[5]; 
  tmp[21] = 0.3535533905932737*A[2]*B[27]+0.3535533905932737*A[4]*B[22]+0.3535533905932737*A[0]*B[21]+0.3535533905932737*A[6]*B[20]+0.3535533905932737*A[1]*B[14]+0.3535533905932737*A[7]*B[13]+0.3535533905932737*A[3]*B[12]+0.3535533905932737*A[5]*B[5]; 
  tmp[22] = 0.3535533905932737*A[1]*B[27]+0.3535533905932737*A[0]*B[22]+0.3535533905932737*A[4]*B[21]+0.3535533905932737*A[5]*B[20]+0.3535533905932737*A[2]*B[14]+0.3535533905932737*A[3]*B[13]+0.3535533905932737*A[7]*B[12]+0.3535533905932737*B[5]*A[6]; 
  tmp[23] = 0.3535533905932737*A[6]*B[31]+0.3535533905932737*A[7]*B[30]+0.3535533905932737*A[3]*B[29]+0.3535533905932737*A[2]*B[28]+0.3535533905932737*A[5]*B[25]+0.3535533905932737*A[4]*B[24]+0.3535533905932737*A[0]*B[23]+0.3535533905932737*A[1]*B[15]; 
  tmp[24] = 0.3535533905932737*A[5]*B[31]+0.3535533905932737*A[3]*B[30]+0.3535533905932737*A[7]*B[29]+0.3535533905932737*A[1]*B[28]+0.3535533905932737*A[6]*B[25]+0.3535533905932737*A[0]*B[24]+0.3535533905932737*A[4]*B[23]+0.3535533905932737*A[2]*B[15]; 
  tmp[25] = 0.3535533905932737*A[4]*B[31]+0.3535533905932737*A[2]*B[30]+0.3535533905932737*A[1]*B[29]+0.3535533905932737*A[7]*B[28]+0.3535533905932737*A[0]*B[25]+0.3535533905932737*A[6]*B[24]+0.3535533905932737*A[5]*B[23]+0.3535533905932737*A[3]*B[15]; 
  tmp[26] = 0.3535533905932737*A[0]*B[26]+0.3535533905932737*A[1]*B[19]+0.3535533905932737*A[2]*B[18]+0.3535533905932737*A[3]*B[17]+0.3535533905932737*A[4]*B[11]+0.3535533905932737*A[5]*B[10]+0.3535533905932737*A[6]*B[9]+0.3535533905932737*B[4]*A[7]; 
  tmp[27] = 0.3535533905932737*A[0]*B[27]+0.3535533905932737*A[1]*B[22]+0.3535533905932737*A[2]*B[21]+0.3535533905932737*A[3]*B[20]+0.3535533905932737*A[4]*B[14]+0.3535533905932737*A[5]*B[13]+0.3535533905932737*A[6]*B[12]+0.3535533905932737*B[5]*A[7]; 
  tmp[28] = 0.3535533905932737*A[3]*B[31]+0.3535533905932737*A[5]*B[30]+0.3535533905932737*A[6]*B[29]+0.3535533905932737*A[0]*B[28]+0.3535533905932737*A[7]*B[25]+0.3535533905932737*A[1]*B[24]+0.3535533905932737*A[2]*B[23]+0.3535533905932737*A[4]*B[15]; 
  tmp[29] = 0.3535533905932737*A[2]*B[31]+0.3535533905932737*A[4]*B[30]+0.3535533905932737*A[0]*B[29]+0.3535533905932737*A[6]*B[28]+0.3535533905932737*A[1]*B[25]+0.3535533905932737*A[7]*B[24]+0.3535533905932737*A[3]*B[23]+0.3535533905932737*A[5]*B[15]; 
  tmp[30] = 0.3535533905932737*A[1]*B[31]+0.3535533905932737*A[0]*B[30]+0.3535533905932737*A[4]*B[29]+0.3535533905932737*A[5]*B[28]+0.3535533905932737*A[2]*B[25]+0.3535533905932737*A[3]*B[24]+0.3535533905932737*A[7]*B[23]+0.3535533905932737*A[6]*B[15]; 
  tmp[31] = 0.3535533905932737*A[0]*B[31]+0.3535533905932737*A[1]*B[30]+0.3535533905932737*A[2]*B[29]+0.3535533905932737*A[3]*B[28]+0.3535533905932737*A[4]*B[25]+0.3535533905932737*A[5]*B[24]+0.3535533905932737*A[6]*B[23]+0.3535533905932737*A[7]*B[15]; 
  tmp[32] = 0.3535533905932737*A[0]*B[32]; 
 
  // This tmp allows for in-place multiplication. 
  for (unsigned short int i=0; i<33; i++) 
  { 
    out[i] = tmp[i]; 
  } 
 
} 
 
void CartFieldBinOpConfPhaseDivide3x2vSerInclVx2_P1(binOpData_t* data, const double *A, const double *B, const short int Ncomp, const short int eqNcomp, double *out) 
{ 
  // A:       configuration space denominator field (must be a scalar field). 
  // B:       phase space numerator field (must be a scalar field). 
  // Ncomp:   number of components of B (=1 here). 
  // eqNcomp: =1 if A:numComponents=B:numComponents, =0 else (=1 here). 
  // out:     output field (same number of components as B). 
 
  // If a corner value is below zero, use cell average A.
  bool avgA = false;
  if ((-1.837117307087383*A[7])+1.060660171779821*(A[6]+A[5]+A[4])-0.6123724356957944*(A[3]+A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]+1.060660171779821*A[6]-1.060660171779821*(A[5]+A[4])-0.6123724356957944*(A[3]+A[2])+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]-1.060660171779821*A[6]+1.060660171779821*A[5]-1.060660171779821*A[4]-0.6123724356957944*A[3]+0.6123724356957944*A[2]-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])-1.060660171779821*(A[6]+A[5])+1.060660171779821*A[4]-0.6123724356957944*A[3]+0.6123724356957944*(A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]-1.060660171779821*(A[6]+A[5])+1.060660171779821*A[4]+0.6123724356957944*A[3]-0.6123724356957944*(A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])-1.060660171779821*A[6]+1.060660171779821*A[5]-1.060660171779821*A[4]+0.6123724356957944*A[3]-0.6123724356957944*A[2]+0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if ((-1.837117307087383*A[7])+1.060660171779821*A[6]-1.060660171779821*(A[5]+A[4])+0.6123724356957944*(A[3]+A[2])-0.6123724356957944*A[1]+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
  if (1.837117307087383*A[7]+1.060660171779821*(A[6]+A[5]+A[4])+0.6123724356957944*(A[3]+A[2]+A[1])+0.3535533905932737*A[0] < 0.0) { 
    avgA = true;
  }
 
  double As[8]; 
  double Bs[33]; 
  if (avgA) { 
    As[0] = A[0]; 
    As[1] = 0.0; 
    As[2] = 0.0; 
    As[3] = 0.0; 
    As[4] = 0.0; 
    As[5] = 0.0; 
    As[6] = 0.0; 
    As[7] = 0.0; 
    Bs[0] = B[0]; 
    Bs[1] = 0.0; 
    Bs[2] = 0.0; 
    Bs[3] = 0.0; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = 0.0; 
    Bs[7] = 0.0; 
    Bs[8] = 0.0; 
    Bs[9] = 0.0; 
    Bs[10] = 0.0; 
    Bs[11] = 0.0; 
    Bs[12] = 0.0; 
    Bs[13] = 0.0; 
    Bs[14] = 0.0; 
    Bs[15] = B[15]; 
    Bs[16] = 0.0; 
    Bs[17] = 0.0; 
    Bs[18] = 0.0; 
    Bs[19] = 0.0; 
    Bs[20] = 0.0; 
    Bs[21] = 0.0; 
    Bs[22] = 0.0; 
    Bs[23] = 0.0; 
    Bs[24] = 0.0; 
    Bs[25] = 0.0; 
    Bs[26] = 0.0; 
    Bs[27] = 0.0; 
    Bs[28] = 0.0; 
    Bs[29] = 0.0; 
    Bs[30] = 0.0; 
    Bs[31] = 0.0; 
    Bs[32] = B[32]; 
  } else { 
    As[0] = A[0]; 
    As[1] = A[1]; 
    As[2] = A[2]; 
    As[3] = A[3]; 
    As[4] = A[4]; 
    As[5] = A[5]; 
    As[6] = A[6]; 
    As[7] = A[7]; 
    Bs[0] = B[0]; 
    Bs[1] = B[1]; 
    Bs[2] = B[2]; 
    Bs[3] = B[3]; 
    Bs[4] = B[4]; 
    Bs[5] = B[5]; 
    Bs[6] = B[6]; 
    Bs[7] = B[7]; 
    Bs[8] = B[8]; 
    Bs[9] = B[9]; 
    Bs[10] = B[10]; 
    Bs[11] = B[11]; 
    Bs[12] = B[12]; 
    Bs[13] = B[13]; 
    Bs[14] = B[14]; 
    Bs[15] = B[15]; 
    Bs[16] = B[16]; 
    Bs[17] = B[17]; 
    Bs[18] = B[18]; 
    Bs[19] = B[19]; 
    Bs[20] = B[20]; 
    Bs[21] = B[21]; 
    Bs[22] = B[22]; 
    Bs[23] = B[23]; 
    Bs[24] = B[24]; 
    Bs[25] = B[25]; 
    Bs[26] = B[26]; 
    Bs[27] = B[27]; 
    Bs[28] = B[28]; 
    Bs[29] = B[29]; 
    Bs[30] = B[30]; 
    Bs[31] = B[31]; 
    Bs[32] = B[32]; 
  } 
 
  // Fill AEM matrix. 
  data->AEM_D = Eigen::MatrixXd::Zero(33,33); 
  data->AEM_D(0,0) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,1) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,2) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,3) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,6) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,7) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,8) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,9) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,10) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,11) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,14) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,15) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,16) = 0.3535533905932737*As[2]; 
  data->AEM_D(0,17) = 0.3535533905932737*As[4]; 
  data->AEM_D(0,18) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,19) = 0.3535533905932737*As[6]; 
  data->AEM_D(0,22) = 0.3535533905932737*As[1]; 
  data->AEM_D(0,23) = 0.3535533905932737*As[7]; 
  data->AEM_D(0,24) = 0.3535533905932737*As[3]; 
  data->AEM_D(0,25) = 0.3535533905932737*As[5]; 
  data->AEM_D(0,26) = 0.3535533905932737*As[6]; 
  data->AEM_D(0,27) = 0.3535533905932737*As[0]; 
  data->AEM_D(0,30) = 0.3535533905932737*As[7]; 
  data->AEM_D(0,31) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,3) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,12) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,15) = 0.3535533905932737*As[4]; 
  data->AEM_D(1,16) = 0.3535533905932737*As[2]; 
  data->AEM_D(1,17) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,18) = 0.3535533905932737*As[7]; 
  data->AEM_D(1,21) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,22) = 0.3535533905932737*As[6]; 
  data->AEM_D(1,23) = 0.3535533905932737*As[5]; 
  data->AEM_D(1,24) = 0.3535533905932737*As[3]; 
  data->AEM_D(1,25) = 0.3535533905932737*As[7]; 
  data->AEM_D(1,26) = 0.3535533905932737*As[1]; 
  data->AEM_D(1,29) = 0.3535533905932737*As[6]; 
  data->AEM_D(1,30) = 0.3535533905932737*As[0]; 
  data->AEM_D(1,31) = 0.3535533905932737*As[6]; 
  data->AEM_D(1,32) = 0.3535533905932737*As[7]; 
  data->AEM_D(2,0) = 0.3535533905932737*As[3]; 
  data->AEM_D(2,1) = 0.3535533905932737*As[2]; 
  data->AEM_D(2,4) = 0.3535533905932737*As[5]; 
  data->AEM_D(2,5) = 0.3535533905932737*As[4]; 
  data->AEM_D(2,10) = 0.3535533905932737*As[1]; 
  data->AEM_D(2,18) = 0.3535533905932737*As[2]; 
  data->AEM_D(2,26) = 0.3535533905932737*As[3]; 
  data->AEM_D(3,2) = 0.3535533905932737*As[1]; 
  data->AEM_D(3,10) = 0.3535533905932737*As[2]; 
  data->AEM_D(3,18) = 0.3535533905932737*As[3]; 
  data->AEM_D(3,29) = 0.3535533905932737*As[7]; 
  data->AEM_D(3,30) = 0.3535533905932737*As[6]; 
  data->AEM_D(3,31) = 0.3535533905932737*As[5]; 
  data->AEM_D(3,32) = 0.3535533905932737*As[4]; 
  data->AEM_D(4,2) = 0.3535533905932737*As[3]; 
  data->AEM_D(4,3) = 0.3535533905932737*As[2]; 
  data->AEM_D(4,8) = 0.3535533905932737*As[4]; 
  data->AEM_D(4,16) = 0.3535533905932737*As[5]; 
  data->AEM_D(4,24) = 0.3535533905932737*As[6]; 
  data->AEM_D(5,0) = 0.3535533905932737*As[4]; 
  data->AEM_D(5,8) = 0.3535533905932737*As[5]; 
  data->AEM_D(5,16) = 0.3535533905932737*As[6]; 
  data->AEM_D(6,14) = 0.3535533905932737*As[7]; 
  data->AEM_D(6,23) = 0.3535533905932737*As[7]; 
 
  // Fill BEV. 
  data->BEV_D << Bs[0],Bs[1],Bs[2],Bs[3],Bs[4],Bs[5],Bs[6],Bs[7],Bs[8],Bs[9],Bs[10],Bs[11],Bs[12],Bs[13],Bs[14],Bs[15],Bs[16],Bs[17],Bs[18],Bs[19],Bs[20],Bs[21],Bs[22],Bs[23],Bs[24],Bs[25],Bs[26],Bs[27],Bs[28],Bs[29],Bs[30],Bs[31],Bs[32]; 
 
  // Solve the system of equations. 
  data->u_D = data->AEM_D.colPivHouseholderQr().solve(data->BEV_D); 
 
  // Copy data from Eigen vector. 
  Eigen::Map<VectorXd>(out,33,1) = data->u_D; 
 
} 
 
