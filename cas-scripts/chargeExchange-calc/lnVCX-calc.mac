/* Generate ln(V_CX) kernels for charge
   exchange operator */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* Serendipity basis. */
maxPolyOrder_Ser : 3$

/* Maximal order basis. */
maxPolyOrder_Max : 3$

declareWriteCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
    ep : string(expr),
    printf(fh, "  double ~a = ~a; ~%", lhs, ep)
  )
)$

writeCExprsCs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (	
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], ep)	
    )
  )
)$

writeCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
     ep : string(expr),
     printf(fh, "  ~a = ~a; ~%", lhs, ep)	
  )
)$

/* ln(V_CX) for charge exchange cross section */
calcLnVCXcellAv(fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  for p : 1 thru pMax do (
    bP : basisP[p],
    print(basisFun, cdim, vdim, p, length(basisP)),
    bC : basisC[p],
    NC : length(bC),
  
    printf(fh, "void ~a_P~a(const double *uIon, const double uNeut*, const double *vtSqIon, const double *vtSqNeut, double *lnVCX) ~%{ ~%", funcNm, p),
    printf(fh, "  // uIon[~a]:        ion fluid velocity. ~%", NC*vdim),
    printf(fh, "  // uNeut[~a]:       neutral fluid velocity. ~%", NC*vdim),
    printf(fh, "  // vtSqIon[~a]:     ion squared thermal speed, sqrt(T/m). ~%", NC),
    printf(fh, "  // vtSqNeut[~a]:    neutral squared thermal speed, sqrt(T/m). ~%", NC),
    printf(fh, "  // lnVCX:          cell ave. ln(V_CX) in CX cross section fitting eqn. ~%"),
    printf(fh, " ~%"),

    uIonAv_c : subst(makelist(uIon[i]=uIon[i+a0],i,0,NC-1),innerProd(varsC,1.0,1.0,doExpand1(uIon,bC))/innerProd(varsC,1.0,1.0,1.0)),
    uNeutAv_c : subst(makelist(uNeut[i]=uNeut[i+a0],i,0,NC-1),innerProd(varsC,1.0,1.0,doExpand1(uNeut,bC))/innerProd(varsC,1.0,1.0,1.0)),

    uIonAv : makelist(0,i,1,vdim),
    uNeutAv : makelist(0,i,1,vdim),
    for vi : 1 thru vdim do (
    	uIonAv[vi] : fullratsimp(subst(a0=(vi-1)*NC,uIonAv_c)),
   	uNeutAv[vi] : fullratsimp(subst(a0=(vi-1)*NC,uNeutAv_c))	
	),

    vtSqIonAv_c : innerProd(varsC,1.0,1.0, doExpand1(vtSqIon,bC))/innerProd(varsC,1.0,1.0,1.0),
    vtSqNeutAv_c : innerProd(varsC,1.0,1.0, doExpand1(vtSqNeut,bC))/innerProd(varsC,1.0,1.0,1.0),

    declareWriteCExprsC(vtSqIonAv, vtSqIonAv_c),
    declareWriteCExprsC(vtSqNeutAv, vtSqNeutAv_c),
    
    /* Define v_IN variable: vINSq = |uIon - uNeut|^2 */
    vINSq_c    : innerProd(varsC,1.0,1.0,sum((uIonAv[d] - uNeutAv[d])^2,d,1,vdim))/innerProd(varsC,1.0,1.0,1.0),

    declareWriteCExprsC(vINSqAv, vINSq_c),
    
    /* Define and write ln(V_CX) */

    lnVCX_c : calcInnerProdList(varsC,1.0,bC,ln(sqrt(4/%pi*vtSqIonAv + 4/%pi*vtSqNeutAv + vINSqAv))),

    writeCExprsCs(lnVCX, lnVCX_c),
    printf(fh, " ~%"),
    printf(fh, "} ~%")
))$

bName        : ["Ser","Max"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max]$

for bInd : 1 thru length(bName) do (
  for c : 1 thru 2 do (
      for v : c thru 3 do (
      	  disp(printf(false,sconcat("Creating PaulsCX lnVCX ", bName[bInd]," ~ax~av"),c,v)),
    	  fname : sconcat("~/max-out/lnVCXcellAv", bName[bInd], c, "x", v, "v", ".cpp"),
    	  fh : openw(fname),

    	  printf(fh, "#include <ChargeExchange.h> ~%"),
    	  printf(fh, "#include <math.h> ~%"),

	  print("attempting to print",c,"x",v,"v functions..."),
    	  /*. Calculate natural log of V_CX. */
    	  funcNm : sconcat("calcLnVCXcellAv", bName[bInd], c, "x", v, "v"),
    	  calcLnVCXcellAv(fh, funcNm, c, v, bName[bInd], maxPolyOrder[bInd]),
    	  close(fh)
  	  )
  )	
)$