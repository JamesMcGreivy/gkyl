/* Generate v^* (relative velocity) kernels for charge
   exchange operator */

load("modal-basis");
load("out-scripts");
load(stringproc)$
fpprec : 24$

/* Serendipity basis. */
maxPolyOrder_Ser : 2$

/* Maximal order basis. */
maxPolyOrder_Max : 3$

declareWriteCExprsC(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  if expr # 0.0 then (
    ep : string(expr),
    printf(fh, "  double ~a = ~a; ~%", lhs, ep)
  )
)$

writeCExprsCs(lhs, rhs) := block([expr],
  expr : float(expand(rhs)),
  for i : 1 thru length(expr) do (	
    if expr[i] # 0.0 then (
      ep : string(expr[i]),
      printf(fh, "  ~a = ~a; ~%", lhs[i-1], ep)	
    )
  )
)$

/* Relative velocity for Pauls' charge exchange */
calcVrelCXcellAv(fh, funcNm, cdim, vdim, basisFun, pMax) := block([],
  kill(varsC, varsP, basisC, basisP),
  modNm : sconcat("basis-precalc/basis", basisFun, cdim, "x", vdim, "v"),
  load(modNm),
  for p : 1 thru pMax do (
    bP : basisP[p],
    print(basisFun, cdim, vdim, p, length(basisP)),
    bC : basisC[p],
    NC : length(bC),
  
    printf(fh, "void ~a_P~a(const double *w, const double *u, const double *vtSq, double *vrelCX) ~%{ ~%", funcNm, p),
    printf(fh, "  // w[~a]:    Cell-center coordinates. ~%", cdim+vdim),
    printf(fh, "  // u:        velocity. ~%"),
    printf(fh, "  // vtSq:     squared thermal speed, sqrt(T/m). ~%"),
    printf(fh, "  // vrelCX:   v^* in Pauls CX model. ~%"),
    printf(fh, " ~%"),

    uAv_c : subst(makelist(u[i]=u[i+a0],i,0,NC-1),innerProd(varsC,1.0,1.0,doExpand1(u,bC))/innerProd(varsC,1.0,1.0,1.0)),

    uiAv : makelist(0,i,1,vdim),
    for vi : 1 thru vdim do (
    	uiAv[vi] : fullratsimp(subst(a0=(vi-1)*NC,uAv_c))
	),
	
    vtSqAv_c : innerProd(varsC,1.0,1.0, doExpand1(vtSq,bC))/innerProd(varsC,1.0,1.0,1.0),

    print("Line60", vtSqAv_c),
    declareWriteCExprsC(vtSqAv, vtSqAv_c),
    
    /* Define x variable xSq = (v - u)^2/vtSq */
    xSq_c    : fullratsimp(innerProd(varsP,1/vtSqAv,1.0,sum((w[d+cdim-1] - uiAv[d])^2,d,1,vdim))/innerProd(varsP,1.0,1.0,1.0)),

    print("Line66", xSq_c),
    declareWriteCExprsC(xSqAv, xSq_c),
    
    /* Define relative velocity */
    vrelCX_c  : calcInnerProdList(varsP,sqrt(vtSqAv),bP,sqrt(4/pi + xSqAv)),

    print("Line72", vrelCX_c),
    writeCExprsCs(vrelCX, vrelCX_c),
    printf(fh, " ~%"),
    printf(fh, "} ~%"),
    print("End of loop for p=", p)
))$

bName        : ["Ser","Max"]$
maxPolyOrder : [maxPolyOrder_Ser, maxPolyOrder_Max]$

for bInd : 1 thru length(bName) do (
  for c : 3 thru 3 do (
      for v : 3 thru 3 do (
      	  disp(printf(false,sconcat("Creating PaulsCX relative velocity ", bName[bInd]," ~ax~av"),c,v)),
    	  fname : sconcat("~/max-out/vrelCXcellAv", bName[bInd], c, "x", v, "v", ".cpp"),
    	  fh : openw(fname),

    	  printf(fh, "#include <PaulsChargeExchange.h> ~%"),
    	  printf(fh, "#include <math.h> ~%"),

	  print("attempting to print",c,"x",v,"v functions..."),
    	  /*. Calculate relative velocity. */
    	  funcNm : sconcat("vrelCXcellAv", bName[bInd], c, "x", v, "v"),
    	  calcVrelCXcellAv(fh, funcNm, c, v, bName[bInd], maxPolyOrder[bInd]),
    	  close(fh)
  	  )
  )	
)$